// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// The type of operation that generated the action code from calling
/// [checkActionCode].
enum ActionCodeInfoOperation {
  /// Unknown operation.
  unknown,

  /// Password reset code generated via [sendPasswordResetEmail].
  passwordReset,

  /// Email verification code generated via [User.sendEmailVerification].
  verifyEmail,

  /// Email change revocation code generated via [User.updateEmail].
  recoverEmail,

  /// Email sign in code generated via [sendSignInLinkToEmail].
  emailSignIn,

  /// Verify and change email code generated via [User.verifyBeforeUpdateEmail].
  verifyAndChangeEmail,

  /// Action code for reverting second factor addition.
  revertSecondFactorAddition,
}

class PigeonMultiFactorSession {
  PigeonMultiFactorSession({
    required this.id,
  });

  String id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static PigeonMultiFactorSession decode(Object result) {
    result as List<Object?>;
    return PigeonMultiFactorSession(
      id: result[0]! as String,
    );
  }
}

class PigeonPhoneMultiFactorAssertion {
  PigeonPhoneMultiFactorAssertion({
    required this.verificationId,
    required this.verificationCode,
  });

  String verificationId;

  String verificationCode;

  Object encode() {
    return <Object?>[
      verificationId,
      verificationCode,
    ];
  }

  static PigeonPhoneMultiFactorAssertion decode(Object result) {
    result as List<Object?>;
    return PigeonPhoneMultiFactorAssertion(
      verificationId: result[0]! as String,
      verificationCode: result[1]! as String,
    );
  }
}

class PigeonMultiFactorInfo {
  PigeonMultiFactorInfo({
    this.displayName,
    required this.enrollmentTimestamp,
    this.factorId,
    required this.uid,
    this.phoneNumber,
  });

  String? displayName;

  double enrollmentTimestamp;

  String? factorId;

  String uid;

  String? phoneNumber;

  Object encode() {
    return <Object?>[
      displayName,
      enrollmentTimestamp,
      factorId,
      uid,
      phoneNumber,
    ];
  }

  static PigeonMultiFactorInfo decode(Object result) {
    result as List<Object?>;
    return PigeonMultiFactorInfo(
      displayName: result[0] as String?,
      enrollmentTimestamp: result[1]! as double,
      factorId: result[2] as String?,
      uid: result[3]! as String,
      phoneNumber: result[4] as String?,
    );
  }
}

class AuthPigeonFirebaseApp {
  AuthPigeonFirebaseApp({
    required this.appName,
    this.tenantId,
    this.customAuthDomain,
  });

  String appName;

  String? tenantId;

  String? customAuthDomain;

  Object encode() {
    return <Object?>[
      appName,
      tenantId,
      customAuthDomain,
    ];
  }

  static AuthPigeonFirebaseApp decode(Object result) {
    result as List<Object?>;
    return AuthPigeonFirebaseApp(
      appName: result[0]! as String,
      tenantId: result[1] as String?,
      customAuthDomain: result[2] as String?,
    );
  }
}

class PigeonActionCodeInfoData {
  PigeonActionCodeInfoData({
    this.email,
    this.previousEmail,
  });

  String? email;

  String? previousEmail;

  Object encode() {
    return <Object?>[
      email,
      previousEmail,
    ];
  }

  static PigeonActionCodeInfoData decode(Object result) {
    result as List<Object?>;
    return PigeonActionCodeInfoData(
      email: result[0] as String?,
      previousEmail: result[1] as String?,
    );
  }
}

class PigeonActionCodeInfo {
  PigeonActionCodeInfo({
    required this.operation,
    required this.data,
  });

  ActionCodeInfoOperation operation;

  PigeonActionCodeInfoData data;

  Object encode() {
    return <Object?>[
      operation.index,
      data.encode(),
    ];
  }

  static PigeonActionCodeInfo decode(Object result) {
    result as List<Object?>;
    return PigeonActionCodeInfo(
      operation: ActionCodeInfoOperation.values[result[0]! as int],
      data: PigeonActionCodeInfoData.decode(result[1]! as List<Object?>),
    );
  }
}

class PigeonAdditionalUserInfo {
  PigeonAdditionalUserInfo({
    required this.isNewUser,
    this.providerId,
    this.username,
    this.authorizationCode,
    this.profile,
  });

  bool isNewUser;

  String? providerId;

  String? username;

  String? authorizationCode;

  Map<String?, Object?>? profile;

  Object encode() {
    return <Object?>[
      isNewUser,
      providerId,
      username,
      authorizationCode,
      profile,
    ];
  }

  static PigeonAdditionalUserInfo decode(Object result) {
    result as List<Object?>;
    return PigeonAdditionalUserInfo(
      isNewUser: result[0]! as bool,
      providerId: result[1] as String?,
      username: result[2] as String?,
      authorizationCode: result[3] as String?,
      profile: (result[4] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class PigeonAuthCredential {
  PigeonAuthCredential({
    required this.providerId,
    required this.signInMethod,
    required this.nativeId,
    this.accessToken,
  });

  String providerId;

  String signInMethod;

  int nativeId;

  String? accessToken;

  Object encode() {
    return <Object?>[
      providerId,
      signInMethod,
      nativeId,
      accessToken,
    ];
  }

  static PigeonAuthCredential decode(Object result) {
    result as List<Object?>;
    return PigeonAuthCredential(
      providerId: result[0]! as String,
      signInMethod: result[1]! as String,
      nativeId: result[2]! as int,
      accessToken: result[3] as String?,
    );
  }
}

class PigeonUserInfo {
  PigeonUserInfo({
    required this.uid,
    this.email,
    this.displayName,
    this.photoUrl,
    this.phoneNumber,
    required this.isAnonymous,
    required this.isEmailVerified,
    this.providerId,
    this.tenantId,
    this.refreshToken,
    this.creationTimestamp,
    this.lastSignInTimestamp,
  });

  String uid;

  String? email;

  String? displayName;

  String? photoUrl;

  String? phoneNumber;

  bool isAnonymous;

  bool isEmailVerified;

  String? providerId;

  String? tenantId;

  String? refreshToken;

  int? creationTimestamp;

  int? lastSignInTimestamp;

  Object encode() {
    return <Object?>[
      uid,
      email,
      displayName,
      photoUrl,
      phoneNumber,
      isAnonymous,
      isEmailVerified,
      providerId,
      tenantId,
      refreshToken,
      creationTimestamp,
      lastSignInTimestamp,
    ];
  }

  static PigeonUserInfo decode(Object result) {
    result as List<Object?>;
    return PigeonUserInfo(
      uid: result[0]! as String,
      email: result[1] as String?,
      displayName: result[2] as String?,
      photoUrl: result[3] as String?,
      phoneNumber: result[4] as String?,
      isAnonymous: result[5]! as bool,
      isEmailVerified: result[6]! as bool,
      providerId: result[7] as String?,
      tenantId: result[8] as String?,
      refreshToken: result[9] as String?,
      creationTimestamp: result[10] as int?,
      lastSignInTimestamp: result[11] as int?,
    );
  }
}

class PigeonUserDetails {
  PigeonUserDetails({
    required this.userInfo,
    required this.providerData,
  });

  PigeonUserInfo userInfo;

  List<Map<Object?, Object?>?> providerData;

  Object encode() {
    return <Object?>[
      userInfo.encode(),
      providerData,
    ];
  }

  static PigeonUserDetails decode(Object result) {
    result as List<Object?>;
    return PigeonUserDetails(
      userInfo: PigeonUserInfo.decode(result[0]! as List<Object?>),
      providerData:
          (result[1] as List<Object?>?)!.cast<Map<Object?, Object?>?>(),
    );
  }
}

class PigeonUserCredential {
  PigeonUserCredential({
    this.user,
    this.additionalUserInfo,
    this.credential,
  });

  PigeonUserDetails? user;

  PigeonAdditionalUserInfo? additionalUserInfo;

  PigeonAuthCredential? credential;

  Object encode() {
    return <Object?>[
      user?.encode(),
      additionalUserInfo?.encode(),
      credential?.encode(),
    ];
  }

  static PigeonUserCredential decode(Object result) {
    result as List<Object?>;
    return PigeonUserCredential(
      user: result[0] != null
          ? PigeonUserDetails.decode(result[0]! as List<Object?>)
          : null,
      additionalUserInfo: result[1] != null
          ? PigeonAdditionalUserInfo.decode(result[1]! as List<Object?>)
          : null,
      credential: result[2] != null
          ? PigeonAuthCredential.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class PigeonActionCodeSettings {
  PigeonActionCodeSettings({
    required this.url,
    this.dynamicLinkDomain,
    required this.handleCodeInApp,
    this.iOSBundleId,
    this.androidPackageName,
    required this.androidInstallApp,
    this.androidMinimumVersion,
  });

  String url;

  String? dynamicLinkDomain;

  bool handleCodeInApp;

  String? iOSBundleId;

  String? androidPackageName;

  bool androidInstallApp;

  String? androidMinimumVersion;

  Object encode() {
    return <Object?>[
      url,
      dynamicLinkDomain,
      handleCodeInApp,
      iOSBundleId,
      androidPackageName,
      androidInstallApp,
      androidMinimumVersion,
    ];
  }

  static PigeonActionCodeSettings decode(Object result) {
    result as List<Object?>;
    return PigeonActionCodeSettings(
      url: result[0]! as String,
      dynamicLinkDomain: result[1] as String?,
      handleCodeInApp: result[2]! as bool,
      iOSBundleId: result[3] as String?,
      androidPackageName: result[4] as String?,
      androidInstallApp: result[5]! as bool,
      androidMinimumVersion: result[6] as String?,
    );
  }
}

class PigeonFirebaseAuthSettings {
  PigeonFirebaseAuthSettings({
    required this.appVerificationDisabledForTesting,
    this.userAccessGroup,
    this.phoneNumber,
    this.smsCode,
    this.forceRecaptchaFlow,
  });

  bool appVerificationDisabledForTesting;

  String? userAccessGroup;

  String? phoneNumber;

  String? smsCode;

  bool? forceRecaptchaFlow;

  Object encode() {
    return <Object?>[
      appVerificationDisabledForTesting,
      userAccessGroup,
      phoneNumber,
      smsCode,
      forceRecaptchaFlow,
    ];
  }

  static PigeonFirebaseAuthSettings decode(Object result) {
    result as List<Object?>;
    return PigeonFirebaseAuthSettings(
      appVerificationDisabledForTesting: result[0]! as bool,
      userAccessGroup: result[1] as String?,
      phoneNumber: result[2] as String?,
      smsCode: result[3] as String?,
      forceRecaptchaFlow: result[4] as bool?,
    );
  }
}

class PigeonSignInProvider {
  PigeonSignInProvider({
    required this.providerId,
    this.scopes,
    this.customParameters,
  });

  String providerId;

  List<String?>? scopes;

  Map<String?, String?>? customParameters;

  Object encode() {
    return <Object?>[
      providerId,
      scopes,
      customParameters,
    ];
  }

  static PigeonSignInProvider decode(Object result) {
    result as List<Object?>;
    return PigeonSignInProvider(
      providerId: result[0]! as String,
      scopes: (result[1] as List<Object?>?)?.cast<String?>(),
      customParameters:
          (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class PigeonVerifyPhoneNumberRequest {
  PigeonVerifyPhoneNumberRequest({
    this.phoneNumber,
    required this.timeout,
    this.forceResendingToken,
    this.autoRetrievedSmsCodeForTesting,
    this.multiFactorInfoId,
    this.multiFactorSessionId,
  });

  String? phoneNumber;

  int timeout;

  int? forceResendingToken;

  String? autoRetrievedSmsCodeForTesting;

  String? multiFactorInfoId;

  String? multiFactorSessionId;

  Object encode() {
    return <Object?>[
      phoneNumber,
      timeout,
      forceResendingToken,
      autoRetrievedSmsCodeForTesting,
      multiFactorInfoId,
      multiFactorSessionId,
    ];
  }

  static PigeonVerifyPhoneNumberRequest decode(Object result) {
    result as List<Object?>;
    return PigeonVerifyPhoneNumberRequest(
      phoneNumber: result[0] as String?,
      timeout: result[1]! as int,
      forceResendingToken: result[2] as int?,
      autoRetrievedSmsCodeForTesting: result[3] as String?,
      multiFactorInfoId: result[4] as String?,
      multiFactorSessionId: result[5] as String?,
    );
  }
}

class PigeonIdTokenResult {
  PigeonIdTokenResult({
    this.token,
    this.expirationTimestamp,
    this.authTimestamp,
    this.issuedAtTimestamp,
    this.signInProvider,
    this.claims,
    this.signInSecondFactor,
  });

  String? token;

  int? expirationTimestamp;

  int? authTimestamp;

  int? issuedAtTimestamp;

  String? signInProvider;

  Map<String?, Object?>? claims;

  String? signInSecondFactor;

  Object encode() {
    return <Object?>[
      token,
      expirationTimestamp,
      authTimestamp,
      issuedAtTimestamp,
      signInProvider,
      claims,
      signInSecondFactor,
    ];
  }

  static PigeonIdTokenResult decode(Object result) {
    result as List<Object?>;
    return PigeonIdTokenResult(
      token: result[0] as String?,
      expirationTimestamp: result[1] as int?,
      authTimestamp: result[2] as int?,
      issuedAtTimestamp: result[3] as int?,
      signInProvider: result[4] as String?,
      claims: (result[5] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      signInSecondFactor: result[6] as String?,
    );
  }
}

class PigeonUserProfile {
  PigeonUserProfile({
    this.displayName,
    this.photoUrl,
    required this.displayNameChanged,
    required this.photoUrlChanged,
  });

  String? displayName;

  String? photoUrl;

  bool displayNameChanged;

  bool photoUrlChanged;

  Object encode() {
    return <Object?>[
      displayName,
      photoUrl,
      displayNameChanged,
      photoUrlChanged,
    ];
  }

  static PigeonUserProfile decode(Object result) {
    result as List<Object?>;
    return PigeonUserProfile(
      displayName: result[0] as String?,
      photoUrl: result[1] as String?,
      displayNameChanged: result[2]! as bool,
      photoUrlChanged: result[3]! as bool,
    );
  }
}

class PigeonTotpSecret {
  PigeonTotpSecret({
    this.codeIntervalSeconds,
    this.codeLength,
    this.enrollmentCompletionDeadline,
    this.hashingAlgorithm,
    required this.secretKey,
  });

  int? codeIntervalSeconds;

  int? codeLength;

  int? enrollmentCompletionDeadline;

  String? hashingAlgorithm;

  String secretKey;

  Object encode() {
    return <Object?>[
      codeIntervalSeconds,
      codeLength,
      enrollmentCompletionDeadline,
      hashingAlgorithm,
      secretKey,
    ];
  }

  static PigeonTotpSecret decode(Object result) {
    result as List<Object?>;
    return PigeonTotpSecret(
      codeIntervalSeconds: result[0] as int?,
      codeLength: result[1] as int?,
      enrollmentCompletionDeadline: result[2] as int?,
      hashingAlgorithm: result[3] as String?,
      secretKey: result[4]! as String,
    );
  }
}

class _FirebaseAuthHostApiCodec extends StandardMessageCodec {
  const _FirebaseAuthHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AuthPigeonFirebaseApp) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeInfoData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeSettings) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdditionalUserInfo) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAuthCredential) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFirebaseAuthSettings) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIdTokenResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorInfo) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorSession) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonPhoneMultiFactorAssertion) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSignInProvider) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTotpSecret) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserCredential) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserDetails) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserInfo) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserProfile) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is PigeonVerifyPhoneNumberRequest) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AuthPigeonFirebaseApp.decode(readValue(buffer)!);
      case 129:
        return PigeonActionCodeInfo.decode(readValue(buffer)!);
      case 130:
        return PigeonActionCodeInfoData.decode(readValue(buffer)!);
      case 131:
        return PigeonActionCodeSettings.decode(readValue(buffer)!);
      case 132:
        return PigeonAdditionalUserInfo.decode(readValue(buffer)!);
      case 133:
        return PigeonAuthCredential.decode(readValue(buffer)!);
      case 134:
        return PigeonFirebaseAuthSettings.decode(readValue(buffer)!);
      case 135:
        return PigeonIdTokenResult.decode(readValue(buffer)!);
      case 136:
        return PigeonMultiFactorInfo.decode(readValue(buffer)!);
      case 137:
        return PigeonMultiFactorSession.decode(readValue(buffer)!);
      case 138:
        return PigeonPhoneMultiFactorAssertion.decode(readValue(buffer)!);
      case 139:
        return PigeonSignInProvider.decode(readValue(buffer)!);
      case 140:
        return PigeonTotpSecret.decode(readValue(buffer)!);
      case 141:
        return PigeonUserCredential.decode(readValue(buffer)!);
      case 142:
        return PigeonUserDetails.decode(readValue(buffer)!);
      case 143:
        return PigeonUserInfo.decode(readValue(buffer)!);
      case 144:
        return PigeonUserProfile.decode(readValue(buffer)!);
      case 145:
        return PigeonVerifyPhoneNumberRequest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseAuthHostApi {
  /// Constructor for [FirebaseAuthHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseAuthHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseAuthHostApiCodec();

  Future<String> registerIdTokenListener(AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.registerIdTokenListener',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> registerAuthStateListener(
      AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.registerAuthStateListener',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> useEmulator(
      AuthPigeonFirebaseApp arg_app, String arg_host, int arg_port) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.useEmulator',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_host, arg_port]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> applyActionCode(
      AuthPigeonFirebaseApp arg_app, String arg_code) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.applyActionCode',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_code]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonActionCodeInfo> checkActionCode(
      AuthPigeonFirebaseApp arg_app, String arg_code) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.checkActionCode',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_code]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonActionCodeInfo?)!;
    }
  }

  Future<void> confirmPasswordReset(AuthPigeonFirebaseApp arg_app,
      String arg_code, String arg_newPassword) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.confirmPasswordReset',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_code, arg_newPassword]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonUserCredential> createUserWithEmailAndPassword(
      AuthPigeonFirebaseApp arg_app,
      String arg_email,
      String arg_password) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.createUserWithEmailAndPassword',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_email, arg_password]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInAnonymously(
      AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInAnonymously',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInWithCredential(
      AuthPigeonFirebaseApp arg_app, Map<String?, Object?> arg_input) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithCredential',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_input]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInWithCustomToken(
      AuthPigeonFirebaseApp arg_app, String arg_token) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithCustomToken',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_token]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInWithEmailAndPassword(
      AuthPigeonFirebaseApp arg_app,
      String arg_email,
      String arg_password) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithEmailAndPassword',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_email, arg_password]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInWithEmailLink(
      AuthPigeonFirebaseApp arg_app,
      String arg_email,
      String arg_emailLink) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithEmailLink',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_email, arg_emailLink]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> signInWithProvider(AuthPigeonFirebaseApp arg_app,
      PigeonSignInProvider arg_signInProvider) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithProvider',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_signInProvider]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<void> signOut(AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signOut',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<String?>> fetchSignInMethodsForEmail(
      AuthPigeonFirebaseApp arg_app, String arg_email) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.fetchSignInMethodsForEmail',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_email]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  Future<void> sendPasswordResetEmail(
      AuthPigeonFirebaseApp arg_app,
      String arg_email,
      PigeonActionCodeSettings? arg_actionCodeSettings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.sendPasswordResetEmail',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_app, arg_email, arg_actionCodeSettings])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendSignInLinkToEmail(AuthPigeonFirebaseApp arg_app,
      String arg_email, PigeonActionCodeSettings arg_actionCodeSettings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.sendSignInLinkToEmail',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_app, arg_email, arg_actionCodeSettings])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> setLanguageCode(
      AuthPigeonFirebaseApp arg_app, String? arg_languageCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.setLanguageCode',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_languageCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> setSettings(AuthPigeonFirebaseApp arg_app,
      PigeonFirebaseAuthSettings arg_settings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.setSettings',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_settings]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> verifyPasswordResetCode(
      AuthPigeonFirebaseApp arg_app, String arg_code) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.verifyPasswordResetCode',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_code]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> verifyPhoneNumber(AuthPigeonFirebaseApp arg_app,
      PigeonVerifyPhoneNumberRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.verifyPhoneNumber',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> revokeTokenWithAuthorizationCode(
      AuthPigeonFirebaseApp arg_app, String arg_authorizationCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.revokeTokenWithAuthorizationCode',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_authorizationCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FirebaseAuthUserHostApiCodec extends StandardMessageCodec {
  const _FirebaseAuthUserHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AuthPigeonFirebaseApp) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeInfoData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeSettings) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdditionalUserInfo) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAuthCredential) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFirebaseAuthSettings) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIdTokenResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorInfo) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorSession) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonPhoneMultiFactorAssertion) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSignInProvider) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTotpSecret) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserCredential) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserDetails) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserInfo) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserProfile) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is PigeonVerifyPhoneNumberRequest) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AuthPigeonFirebaseApp.decode(readValue(buffer)!);
      case 129:
        return PigeonActionCodeInfo.decode(readValue(buffer)!);
      case 130:
        return PigeonActionCodeInfoData.decode(readValue(buffer)!);
      case 131:
        return PigeonActionCodeSettings.decode(readValue(buffer)!);
      case 132:
        return PigeonAdditionalUserInfo.decode(readValue(buffer)!);
      case 133:
        return PigeonAuthCredential.decode(readValue(buffer)!);
      case 134:
        return PigeonFirebaseAuthSettings.decode(readValue(buffer)!);
      case 135:
        return PigeonIdTokenResult.decode(readValue(buffer)!);
      case 136:
        return PigeonMultiFactorInfo.decode(readValue(buffer)!);
      case 137:
        return PigeonMultiFactorSession.decode(readValue(buffer)!);
      case 138:
        return PigeonPhoneMultiFactorAssertion.decode(readValue(buffer)!);
      case 139:
        return PigeonSignInProvider.decode(readValue(buffer)!);
      case 140:
        return PigeonTotpSecret.decode(readValue(buffer)!);
      case 141:
        return PigeonUserCredential.decode(readValue(buffer)!);
      case 142:
        return PigeonUserDetails.decode(readValue(buffer)!);
      case 143:
        return PigeonUserInfo.decode(readValue(buffer)!);
      case 144:
        return PigeonUserProfile.decode(readValue(buffer)!);
      case 145:
        return PigeonVerifyPhoneNumberRequest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseAuthUserHostApi {
  /// Constructor for [FirebaseAuthUserHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseAuthUserHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseAuthUserHostApiCodec();

  Future<void> delete(AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.delete',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonIdTokenResult> getIdToken(
      AuthPigeonFirebaseApp arg_app, bool arg_forceRefresh) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.getIdToken',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_forceRefresh]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonIdTokenResult?)!;
    }
  }

  Future<PigeonUserCredential> linkWithCredential(
      AuthPigeonFirebaseApp arg_app, Map<String?, Object?> arg_input) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.linkWithCredential',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_input]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> linkWithProvider(AuthPigeonFirebaseApp arg_app,
      PigeonSignInProvider arg_signInProvider) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.linkWithProvider',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_signInProvider]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> reauthenticateWithCredential(
      AuthPigeonFirebaseApp arg_app, Map<String?, Object?> arg_input) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reauthenticateWithCredential',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_input]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserCredential> reauthenticateWithProvider(
      AuthPigeonFirebaseApp arg_app,
      PigeonSignInProvider arg_signInProvider) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reauthenticateWithProvider',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_signInProvider]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserDetails> reload(AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reload',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserDetails?)!;
    }
  }

  Future<void> sendEmailVerification(AuthPigeonFirebaseApp arg_app,
      PigeonActionCodeSettings? arg_actionCodeSettings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.sendEmailVerification',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_actionCodeSettings]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonUserCredential> unlink(
      AuthPigeonFirebaseApp arg_app, String arg_providerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.unlink',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_providerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }

  Future<PigeonUserDetails> updateEmail(
      AuthPigeonFirebaseApp arg_app, String arg_newEmail) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updateEmail',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_newEmail]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserDetails?)!;
    }
  }

  Future<PigeonUserDetails> updatePassword(
      AuthPigeonFirebaseApp arg_app, String arg_newPassword) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updatePassword',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_app, arg_newPassword]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserDetails?)!;
    }
  }

  Future<PigeonUserDetails> updatePhoneNumber(
      AuthPigeonFirebaseApp arg_app, Map<String?, Object?> arg_input) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updatePhoneNumber',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_input]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserDetails?)!;
    }
  }

  Future<PigeonUserDetails> updateProfile(
      AuthPigeonFirebaseApp arg_app, PigeonUserProfile arg_profile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updateProfile',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_profile]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserDetails?)!;
    }
  }

  Future<void> verifyBeforeUpdateEmail(
      AuthPigeonFirebaseApp arg_app,
      String arg_newEmail,
      PigeonActionCodeSettings? arg_actionCodeSettings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.verifyBeforeUpdateEmail',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_app, arg_newEmail, arg_actionCodeSettings])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MultiFactorUserHostApiCodec extends StandardMessageCodec {
  const _MultiFactorUserHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AuthPigeonFirebaseApp) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMultiFactorSession) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonPhoneMultiFactorAssertion) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AuthPigeonFirebaseApp.decode(readValue(buffer)!);
      case 129:
        return PigeonMultiFactorInfo.decode(readValue(buffer)!);
      case 130:
        return PigeonMultiFactorSession.decode(readValue(buffer)!);
      case 131:
        return PigeonPhoneMultiFactorAssertion.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MultiFactorUserHostApi {
  /// Constructor for [MultiFactorUserHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultiFactorUserHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MultiFactorUserHostApiCodec();

  Future<void> enrollPhone(
      AuthPigeonFirebaseApp arg_app,
      PigeonPhoneMultiFactorAssertion arg_assertion,
      String? arg_displayName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.enrollPhone',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_assertion, arg_displayName])
            as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enrollTotp(AuthPigeonFirebaseApp arg_app, String arg_assertionId,
      String? arg_displayName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.enrollTotp',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_assertionId, arg_displayName])
            as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonMultiFactorSession> getSession(
      AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.getSession',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonMultiFactorSession?)!;
    }
  }

  Future<void> unenroll(
      AuthPigeonFirebaseApp arg_app, String arg_factorUid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.unenroll',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_factorUid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PigeonMultiFactorInfo?>> getEnrolledFactors(
      AuthPigeonFirebaseApp arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.getEnrolledFactors',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<PigeonMultiFactorInfo?>();
    }
  }
}

class _MultiFactoResolverHostApiCodec extends StandardMessageCodec {
  const _MultiFactoResolverHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonAdditionalUserInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAuthCredential) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonPhoneMultiFactorAssertion) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserCredential) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserDetails) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonUserInfo) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonAdditionalUserInfo.decode(readValue(buffer)!);
      case 129:
        return PigeonAuthCredential.decode(readValue(buffer)!);
      case 130:
        return PigeonPhoneMultiFactorAssertion.decode(readValue(buffer)!);
      case 131:
        return PigeonUserCredential.decode(readValue(buffer)!);
      case 132:
        return PigeonUserDetails.decode(readValue(buffer)!);
      case 133:
        return PigeonUserInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MultiFactoResolverHostApi {
  /// Constructor for [MultiFactoResolverHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultiFactoResolverHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MultiFactoResolverHostApiCodec();

  Future<PigeonUserCredential> resolveSignIn(
      String arg_resolverId,
      PigeonPhoneMultiFactorAssertion? arg_assertion,
      String? arg_totpAssertionId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactoResolverHostApi.resolveSignIn',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_resolverId, arg_assertion, arg_totpAssertionId])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonUserCredential?)!;
    }
  }
}

class _MultiFactorTotpHostApiCodec extends StandardMessageCodec {
  const _MultiFactorTotpHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonTotpSecret) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonTotpSecret.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MultiFactorTotpHostApi {
  /// Constructor for [MultiFactorTotpHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultiFactorTotpHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MultiFactorTotpHostApiCodec();

  Future<PigeonTotpSecret> generateSecret(String arg_sessionId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.generateSecret',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_sessionId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonTotpSecret?)!;
    }
  }

  Future<String> getAssertionForEnrollment(
      String arg_secretKey, String arg_oneTimePassword) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.getAssertionForEnrollment',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_secretKey, arg_oneTimePassword]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> getAssertionForSignIn(
      String arg_enrollmentId, String arg_oneTimePassword) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.getAssertionForSignIn',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enrollmentId, arg_oneTimePassword])
            as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }
}

class MultiFactorTotpSecretHostApi {
  /// Constructor for [MultiFactorTotpSecretHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultiFactorTotpSecretHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<String> generateQrCodeUrl(
      String arg_secretKey, String? arg_accountName, String? arg_issuer) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpSecretHostApi.generateQrCodeUrl',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_secretKey, arg_accountName, arg_issuer])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> openInOtpApp(String arg_secretKey, String arg_qrCodeUrl) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpSecretHostApi.openInOtpApp',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_secretKey, arg_qrCodeUrl]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _GenerateInterfacesCodec extends StandardMessageCodec {
  const _GenerateInterfacesCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonMultiFactorInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonMultiFactorInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Only used to generate the object interface that are use outside of the Pigeon interface
class GenerateInterfaces {
  /// Constructor for [GenerateInterfaces].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GenerateInterfaces({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _GenerateInterfacesCodec();

  Future<void> pigeonInterface(PigeonMultiFactorInfo arg_info) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.firebase_auth_platform_interface.GenerateInterfaces.pigeonInterface',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_info]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
