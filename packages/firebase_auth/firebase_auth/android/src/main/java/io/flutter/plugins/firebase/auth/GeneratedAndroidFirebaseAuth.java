// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.auth;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidFirebaseAuth {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** The type of operation that generated the action code from calling [checkActionCode]. */
  public enum ActionCodeInfoOperation {
    /** Unknown operation. */
    UNKNOWN(0),
    /** Password reset code generated via [sendPasswordResetEmail]. */
    PASSWORD_RESET(1),
    /** Email verification code generated via [User.sendEmailVerification]. */
    VERIFY_EMAIL(2),
    /** Email change revocation code generated via [User.updateEmail]. */
    RECOVER_EMAIL(3),
    /** Email sign in code generated via [sendSignInLinkToEmail]. */
    EMAIL_SIGN_IN(4),
    /** Verify and change email code generated via [User.verifyBeforeUpdateEmail]. */
    VERIFY_AND_CHANGE_EMAIL(5),
    /** Action code for reverting second factor addition. */
    REVERT_SECOND_FACTOR_ADDITION(6);

    final int index;

    private ActionCodeInfoOperation(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMultiFactorSession {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonMultiFactorSession() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      public @NonNull PigeonMultiFactorSession build() {
        PigeonMultiFactorSession pigeonReturn = new PigeonMultiFactorSession();
        pigeonReturn.setId(id);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(id);
      return toListResult;
    }

    static @NonNull PigeonMultiFactorSession fromList(@NonNull ArrayList<Object> list) {
      PigeonMultiFactorSession pigeonResult = new PigeonMultiFactorSession();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonPhoneMultiFactorAssertion {
    private @NonNull String verificationId;

    public @NonNull String getVerificationId() {
      return verificationId;
    }

    public void setVerificationId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationId\" is null.");
      }
      this.verificationId = setterArg;
    }

    private @NonNull String verificationCode;

    public @NonNull String getVerificationCode() {
      return verificationCode;
    }

    public void setVerificationCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationCode\" is null.");
      }
      this.verificationCode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonPhoneMultiFactorAssertion() {}

    public static final class Builder {

      private @Nullable String verificationId;

      public @NonNull Builder setVerificationId(@NonNull String setterArg) {
        this.verificationId = setterArg;
        return this;
      }

      private @Nullable String verificationCode;

      public @NonNull Builder setVerificationCode(@NonNull String setterArg) {
        this.verificationCode = setterArg;
        return this;
      }

      public @NonNull PigeonPhoneMultiFactorAssertion build() {
        PigeonPhoneMultiFactorAssertion pigeonReturn = new PigeonPhoneMultiFactorAssertion();
        pigeonReturn.setVerificationId(verificationId);
        pigeonReturn.setVerificationCode(verificationCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(verificationId);
      toListResult.add(verificationCode);
      return toListResult;
    }

    static @NonNull PigeonPhoneMultiFactorAssertion fromList(@NonNull ArrayList<Object> list) {
      PigeonPhoneMultiFactorAssertion pigeonResult = new PigeonPhoneMultiFactorAssertion();
      Object verificationId = list.get(0);
      pigeonResult.setVerificationId((String) verificationId);
      Object verificationCode = list.get(1);
      pigeonResult.setVerificationCode((String) verificationCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMultiFactorInfo {
    private @Nullable String displayName;

    public @Nullable String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    private @NonNull Double enrollmentTimestamp;

    public @NonNull Double getEnrollmentTimestamp() {
      return enrollmentTimestamp;
    }

    public void setEnrollmentTimestamp(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enrollmentTimestamp\" is null.");
      }
      this.enrollmentTimestamp = setterArg;
    }

    private @Nullable String factorId;

    public @Nullable String getFactorId() {
      return factorId;
    }

    public void setFactorId(@Nullable String setterArg) {
      this.factorId = setterArg;
    }

    private @NonNull String uid;

    public @NonNull String getUid() {
      return uid;
    }

    public void setUid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonMultiFactorInfo() {}

    public static final class Builder {

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      private @Nullable Double enrollmentTimestamp;

      public @NonNull Builder setEnrollmentTimestamp(@NonNull Double setterArg) {
        this.enrollmentTimestamp = setterArg;
        return this;
      }

      private @Nullable String factorId;

      public @NonNull Builder setFactorId(@Nullable String setterArg) {
        this.factorId = setterArg;
        return this;
      }

      private @Nullable String uid;

      public @NonNull Builder setUid(@NonNull String setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      public @NonNull PigeonMultiFactorInfo build() {
        PigeonMultiFactorInfo pigeonReturn = new PigeonMultiFactorInfo();
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setEnrollmentTimestamp(enrollmentTimestamp);
        pigeonReturn.setFactorId(factorId);
        pigeonReturn.setUid(uid);
        pigeonReturn.setPhoneNumber(phoneNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(displayName);
      toListResult.add(enrollmentTimestamp);
      toListResult.add(factorId);
      toListResult.add(uid);
      toListResult.add(phoneNumber);
      return toListResult;
    }

    static @NonNull PigeonMultiFactorInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonMultiFactorInfo pigeonResult = new PigeonMultiFactorInfo();
      Object displayName = list.get(0);
      pigeonResult.setDisplayName((String) displayName);
      Object enrollmentTimestamp = list.get(1);
      pigeonResult.setEnrollmentTimestamp((Double) enrollmentTimestamp);
      Object factorId = list.get(2);
      pigeonResult.setFactorId((String) factorId);
      Object uid = list.get(3);
      pigeonResult.setUid((String) uid);
      Object phoneNumber = list.get(4);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AuthPigeonFirebaseApp {
    private @NonNull String appName;

    public @NonNull String getAppName() {
      return appName;
    }

    public void setAppName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appName\" is null.");
      }
      this.appName = setterArg;
    }

    private @Nullable String tenantId;

    public @Nullable String getTenantId() {
      return tenantId;
    }

    public void setTenantId(@Nullable String setterArg) {
      this.tenantId = setterArg;
    }

    private @Nullable String customAuthDomain;

    public @Nullable String getCustomAuthDomain() {
      return customAuthDomain;
    }

    public void setCustomAuthDomain(@Nullable String setterArg) {
      this.customAuthDomain = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AuthPigeonFirebaseApp() {}

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@NonNull String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String tenantId;

      public @NonNull Builder setTenantId(@Nullable String setterArg) {
        this.tenantId = setterArg;
        return this;
      }

      private @Nullable String customAuthDomain;

      public @NonNull Builder setCustomAuthDomain(@Nullable String setterArg) {
        this.customAuthDomain = setterArg;
        return this;
      }

      public @NonNull AuthPigeonFirebaseApp build() {
        AuthPigeonFirebaseApp pigeonReturn = new AuthPigeonFirebaseApp();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setTenantId(tenantId);
        pigeonReturn.setCustomAuthDomain(customAuthDomain);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(appName);
      toListResult.add(tenantId);
      toListResult.add(customAuthDomain);
      return toListResult;
    }

    static @NonNull AuthPigeonFirebaseApp fromList(@NonNull ArrayList<Object> list) {
      AuthPigeonFirebaseApp pigeonResult = new AuthPigeonFirebaseApp();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object tenantId = list.get(1);
      pigeonResult.setTenantId((String) tenantId);
      Object customAuthDomain = list.get(2);
      pigeonResult.setCustomAuthDomain((String) customAuthDomain);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonActionCodeInfoData {
    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String previousEmail;

    public @Nullable String getPreviousEmail() {
      return previousEmail;
    }

    public void setPreviousEmail(@Nullable String setterArg) {
      this.previousEmail = setterArg;
    }

    public static final class Builder {

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String previousEmail;

      public @NonNull Builder setPreviousEmail(@Nullable String setterArg) {
        this.previousEmail = setterArg;
        return this;
      }

      public @NonNull PigeonActionCodeInfoData build() {
        PigeonActionCodeInfoData pigeonReturn = new PigeonActionCodeInfoData();
        pigeonReturn.setEmail(email);
        pigeonReturn.setPreviousEmail(previousEmail);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(email);
      toListResult.add(previousEmail);
      return toListResult;
    }

    static @NonNull PigeonActionCodeInfoData fromList(@NonNull ArrayList<Object> list) {
      PigeonActionCodeInfoData pigeonResult = new PigeonActionCodeInfoData();
      Object email = list.get(0);
      pigeonResult.setEmail((String) email);
      Object previousEmail = list.get(1);
      pigeonResult.setPreviousEmail((String) previousEmail);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonActionCodeInfo {
    private @NonNull ActionCodeInfoOperation operation;

    public @NonNull ActionCodeInfoOperation getOperation() {
      return operation;
    }

    public void setOperation(@NonNull ActionCodeInfoOperation setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operation\" is null.");
      }
      this.operation = setterArg;
    }

    private @NonNull PigeonActionCodeInfoData data;

    public @NonNull PigeonActionCodeInfoData getData() {
      return data;
    }

    public void setData(@NonNull PigeonActionCodeInfoData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonActionCodeInfo() {}

    public static final class Builder {

      private @Nullable ActionCodeInfoOperation operation;

      public @NonNull Builder setOperation(@NonNull ActionCodeInfoOperation setterArg) {
        this.operation = setterArg;
        return this;
      }

      private @Nullable PigeonActionCodeInfoData data;

      public @NonNull Builder setData(@NonNull PigeonActionCodeInfoData setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull PigeonActionCodeInfo build() {
        PigeonActionCodeInfo pigeonReturn = new PigeonActionCodeInfo();
        pigeonReturn.setOperation(operation);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(operation == null ? null : operation.index);
      toListResult.add((data == null) ? null : data.toList());
      return toListResult;
    }

    static @NonNull PigeonActionCodeInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonActionCodeInfo pigeonResult = new PigeonActionCodeInfo();
      Object operation = list.get(0);
      pigeonResult.setOperation(ActionCodeInfoOperation.values()[(int) operation]);
      Object data = list.get(1);
      pigeonResult.setData(
          (data == null) ? null : PigeonActionCodeInfoData.fromList((ArrayList<Object>) data));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonAdditionalUserInfo {
    private @NonNull Boolean isNewUser;

    public @NonNull Boolean getIsNewUser() {
      return isNewUser;
    }

    public void setIsNewUser(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isNewUser\" is null.");
      }
      this.isNewUser = setterArg;
    }

    private @Nullable String providerId;

    public @Nullable String getProviderId() {
      return providerId;
    }

    public void setProviderId(@Nullable String setterArg) {
      this.providerId = setterArg;
    }

    private @Nullable String username;

    public @Nullable String getUsername() {
      return username;
    }

    public void setUsername(@Nullable String setterArg) {
      this.username = setterArg;
    }

    private @Nullable String authorizationCode;

    public @Nullable String getAuthorizationCode() {
      return authorizationCode;
    }

    public void setAuthorizationCode(@Nullable String setterArg) {
      this.authorizationCode = setterArg;
    }

    private @Nullable Map<String, Object> profile;

    public @Nullable Map<String, Object> getProfile() {
      return profile;
    }

    public void setProfile(@Nullable Map<String, Object> setterArg) {
      this.profile = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonAdditionalUserInfo() {}

    public static final class Builder {

      private @Nullable Boolean isNewUser;

      public @NonNull Builder setIsNewUser(@NonNull Boolean setterArg) {
        this.isNewUser = setterArg;
        return this;
      }

      private @Nullable String providerId;

      public @NonNull Builder setProviderId(@Nullable String setterArg) {
        this.providerId = setterArg;
        return this;
      }

      private @Nullable String username;

      public @NonNull Builder setUsername(@Nullable String setterArg) {
        this.username = setterArg;
        return this;
      }

      private @Nullable String authorizationCode;

      public @NonNull Builder setAuthorizationCode(@Nullable String setterArg) {
        this.authorizationCode = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> profile;

      public @NonNull Builder setProfile(@Nullable Map<String, Object> setterArg) {
        this.profile = setterArg;
        return this;
      }

      public @NonNull PigeonAdditionalUserInfo build() {
        PigeonAdditionalUserInfo pigeonReturn = new PigeonAdditionalUserInfo();
        pigeonReturn.setIsNewUser(isNewUser);
        pigeonReturn.setProviderId(providerId);
        pigeonReturn.setUsername(username);
        pigeonReturn.setAuthorizationCode(authorizationCode);
        pigeonReturn.setProfile(profile);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(isNewUser);
      toListResult.add(providerId);
      toListResult.add(username);
      toListResult.add(authorizationCode);
      toListResult.add(profile);
      return toListResult;
    }

    static @NonNull PigeonAdditionalUserInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonAdditionalUserInfo pigeonResult = new PigeonAdditionalUserInfo();
      Object isNewUser = list.get(0);
      pigeonResult.setIsNewUser((Boolean) isNewUser);
      Object providerId = list.get(1);
      pigeonResult.setProviderId((String) providerId);
      Object username = list.get(2);
      pigeonResult.setUsername((String) username);
      Object authorizationCode = list.get(3);
      pigeonResult.setAuthorizationCode((String) authorizationCode);
      Object profile = list.get(4);
      pigeonResult.setProfile((Map<String, Object>) profile);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonAuthCredential {
    private @NonNull String providerId;

    public @NonNull String getProviderId() {
      return providerId;
    }

    public void setProviderId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"providerId\" is null.");
      }
      this.providerId = setterArg;
    }

    private @NonNull String signInMethod;

    public @NonNull String getSignInMethod() {
      return signInMethod;
    }

    public void setSignInMethod(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signInMethod\" is null.");
      }
      this.signInMethod = setterArg;
    }

    private @NonNull Long nativeId;

    public @NonNull Long getNativeId() {
      return nativeId;
    }

    public void setNativeId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"nativeId\" is null.");
      }
      this.nativeId = setterArg;
    }

    private @Nullable String accessToken;

    public @Nullable String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonAuthCredential() {}

    public static final class Builder {

      private @Nullable String providerId;

      public @NonNull Builder setProviderId(@NonNull String setterArg) {
        this.providerId = setterArg;
        return this;
      }

      private @Nullable String signInMethod;

      public @NonNull Builder setSignInMethod(@NonNull String setterArg) {
        this.signInMethod = setterArg;
        return this;
      }

      private @Nullable Long nativeId;

      public @NonNull Builder setNativeId(@NonNull Long setterArg) {
        this.nativeId = setterArg;
        return this;
      }

      private @Nullable String accessToken;

      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      public @NonNull PigeonAuthCredential build() {
        PigeonAuthCredential pigeonReturn = new PigeonAuthCredential();
        pigeonReturn.setProviderId(providerId);
        pigeonReturn.setSignInMethod(signInMethod);
        pigeonReturn.setNativeId(nativeId);
        pigeonReturn.setAccessToken(accessToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(providerId);
      toListResult.add(signInMethod);
      toListResult.add(nativeId);
      toListResult.add(accessToken);
      return toListResult;
    }

    static @NonNull PigeonAuthCredential fromList(@NonNull ArrayList<Object> list) {
      PigeonAuthCredential pigeonResult = new PigeonAuthCredential();
      Object providerId = list.get(0);
      pigeonResult.setProviderId((String) providerId);
      Object signInMethod = list.get(1);
      pigeonResult.setSignInMethod((String) signInMethod);
      Object nativeId = list.get(2);
      pigeonResult.setNativeId(
          (nativeId == null)
              ? null
              : ((nativeId instanceof Integer) ? (Integer) nativeId : (Long) nativeId));
      Object accessToken = list.get(3);
      pigeonResult.setAccessToken((String) accessToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonUserInfo {
    private @NonNull String uid;

    public @NonNull String getUid() {
      return uid;
    }

    public void setUid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String displayName;

    public @Nullable String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    private @Nullable String photoUrl;

    public @Nullable String getPhotoUrl() {
      return photoUrl;
    }

    public void setPhotoUrl(@Nullable String setterArg) {
      this.photoUrl = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @NonNull Boolean isAnonymous;

    public @NonNull Boolean getIsAnonymous() {
      return isAnonymous;
    }

    public void setIsAnonymous(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isAnonymous\" is null.");
      }
      this.isAnonymous = setterArg;
    }

    private @NonNull Boolean isEmailVerified;

    public @NonNull Boolean getIsEmailVerified() {
      return isEmailVerified;
    }

    public void setIsEmailVerified(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isEmailVerified\" is null.");
      }
      this.isEmailVerified = setterArg;
    }

    private @Nullable String providerId;

    public @Nullable String getProviderId() {
      return providerId;
    }

    public void setProviderId(@Nullable String setterArg) {
      this.providerId = setterArg;
    }

    private @Nullable String tenantId;

    public @Nullable String getTenantId() {
      return tenantId;
    }

    public void setTenantId(@Nullable String setterArg) {
      this.tenantId = setterArg;
    }

    private @Nullable String refreshToken;

    public @Nullable String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable Long creationTimestamp;

    public @Nullable Long getCreationTimestamp() {
      return creationTimestamp;
    }

    public void setCreationTimestamp(@Nullable Long setterArg) {
      this.creationTimestamp = setterArg;
    }

    private @Nullable Long lastSignInTimestamp;

    public @Nullable Long getLastSignInTimestamp() {
      return lastSignInTimestamp;
    }

    public void setLastSignInTimestamp(@Nullable Long setterArg) {
      this.lastSignInTimestamp = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonUserInfo() {}

    public static final class Builder {

      private @Nullable String uid;

      public @NonNull Builder setUid(@NonNull String setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      private @Nullable String photoUrl;

      public @NonNull Builder setPhotoUrl(@Nullable String setterArg) {
        this.photoUrl = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable Boolean isAnonymous;

      public @NonNull Builder setIsAnonymous(@NonNull Boolean setterArg) {
        this.isAnonymous = setterArg;
        return this;
      }

      private @Nullable Boolean isEmailVerified;

      public @NonNull Builder setIsEmailVerified(@NonNull Boolean setterArg) {
        this.isEmailVerified = setterArg;
        return this;
      }

      private @Nullable String providerId;

      public @NonNull Builder setProviderId(@Nullable String setterArg) {
        this.providerId = setterArg;
        return this;
      }

      private @Nullable String tenantId;

      public @NonNull Builder setTenantId(@Nullable String setterArg) {
        this.tenantId = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      private @Nullable Long creationTimestamp;

      public @NonNull Builder setCreationTimestamp(@Nullable Long setterArg) {
        this.creationTimestamp = setterArg;
        return this;
      }

      private @Nullable Long lastSignInTimestamp;

      public @NonNull Builder setLastSignInTimestamp(@Nullable Long setterArg) {
        this.lastSignInTimestamp = setterArg;
        return this;
      }

      public @NonNull PigeonUserInfo build() {
        PigeonUserInfo pigeonReturn = new PigeonUserInfo();
        pigeonReturn.setUid(uid);
        pigeonReturn.setEmail(email);
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setPhotoUrl(photoUrl);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setIsAnonymous(isAnonymous);
        pigeonReturn.setIsEmailVerified(isEmailVerified);
        pigeonReturn.setProviderId(providerId);
        pigeonReturn.setTenantId(tenantId);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setCreationTimestamp(creationTimestamp);
        pigeonReturn.setLastSignInTimestamp(lastSignInTimestamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(uid);
      toListResult.add(email);
      toListResult.add(displayName);
      toListResult.add(photoUrl);
      toListResult.add(phoneNumber);
      toListResult.add(isAnonymous);
      toListResult.add(isEmailVerified);
      toListResult.add(providerId);
      toListResult.add(tenantId);
      toListResult.add(refreshToken);
      toListResult.add(creationTimestamp);
      toListResult.add(lastSignInTimestamp);
      return toListResult;
    }

    static @NonNull PigeonUserInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonUserInfo pigeonResult = new PigeonUserInfo();
      Object uid = list.get(0);
      pigeonResult.setUid((String) uid);
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      Object displayName = list.get(2);
      pigeonResult.setDisplayName((String) displayName);
      Object photoUrl = list.get(3);
      pigeonResult.setPhotoUrl((String) photoUrl);
      Object phoneNumber = list.get(4);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object isAnonymous = list.get(5);
      pigeonResult.setIsAnonymous((Boolean) isAnonymous);
      Object isEmailVerified = list.get(6);
      pigeonResult.setIsEmailVerified((Boolean) isEmailVerified);
      Object providerId = list.get(7);
      pigeonResult.setProviderId((String) providerId);
      Object tenantId = list.get(8);
      pigeonResult.setTenantId((String) tenantId);
      Object refreshToken = list.get(9);
      pigeonResult.setRefreshToken((String) refreshToken);
      Object creationTimestamp = list.get(10);
      pigeonResult.setCreationTimestamp(
          (creationTimestamp == null)
              ? null
              : ((creationTimestamp instanceof Integer)
                  ? (Integer) creationTimestamp
                  : (Long) creationTimestamp));
      Object lastSignInTimestamp = list.get(11);
      pigeonResult.setLastSignInTimestamp(
          (lastSignInTimestamp == null)
              ? null
              : ((lastSignInTimestamp instanceof Integer)
                  ? (Integer) lastSignInTimestamp
                  : (Long) lastSignInTimestamp));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonUserDetails {
    private @NonNull PigeonUserInfo userInfo;

    public @NonNull PigeonUserInfo getUserInfo() {
      return userInfo;
    }

    public void setUserInfo(@NonNull PigeonUserInfo setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userInfo\" is null.");
      }
      this.userInfo = setterArg;
    }

    private @NonNull List<Map<Object, Object>> providerData;

    public @NonNull List<Map<Object, Object>> getProviderData() {
      return providerData;
    }

    public void setProviderData(@NonNull List<Map<Object, Object>> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"providerData\" is null.");
      }
      this.providerData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonUserDetails() {}

    public static final class Builder {

      private @Nullable PigeonUserInfo userInfo;

      public @NonNull Builder setUserInfo(@NonNull PigeonUserInfo setterArg) {
        this.userInfo = setterArg;
        return this;
      }

      private @Nullable List<Map<Object, Object>> providerData;

      public @NonNull Builder setProviderData(@NonNull List<Map<Object, Object>> setterArg) {
        this.providerData = setterArg;
        return this;
      }

      public @NonNull PigeonUserDetails build() {
        PigeonUserDetails pigeonReturn = new PigeonUserDetails();
        pigeonReturn.setUserInfo(userInfo);
        pigeonReturn.setProviderData(providerData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((userInfo == null) ? null : userInfo.toList());
      toListResult.add(providerData);
      return toListResult;
    }

    static @NonNull PigeonUserDetails fromList(@NonNull ArrayList<Object> list) {
      PigeonUserDetails pigeonResult = new PigeonUserDetails();
      Object userInfo = list.get(0);
      pigeonResult.setUserInfo(
          (userInfo == null) ? null : PigeonUserInfo.fromList((ArrayList<Object>) userInfo));
      Object providerData = list.get(1);
      pigeonResult.setProviderData((List<Map<Object, Object>>) providerData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonUserCredential {
    private @Nullable PigeonUserDetails user;

    public @Nullable PigeonUserDetails getUser() {
      return user;
    }

    public void setUser(@Nullable PigeonUserDetails setterArg) {
      this.user = setterArg;
    }

    private @Nullable PigeonAdditionalUserInfo additionalUserInfo;

    public @Nullable PigeonAdditionalUserInfo getAdditionalUserInfo() {
      return additionalUserInfo;
    }

    public void setAdditionalUserInfo(@Nullable PigeonAdditionalUserInfo setterArg) {
      this.additionalUserInfo = setterArg;
    }

    private @Nullable PigeonAuthCredential credential;

    public @Nullable PigeonAuthCredential getCredential() {
      return credential;
    }

    public void setCredential(@Nullable PigeonAuthCredential setterArg) {
      this.credential = setterArg;
    }

    public static final class Builder {

      private @Nullable PigeonUserDetails user;

      public @NonNull Builder setUser(@Nullable PigeonUserDetails setterArg) {
        this.user = setterArg;
        return this;
      }

      private @Nullable PigeonAdditionalUserInfo additionalUserInfo;

      public @NonNull Builder setAdditionalUserInfo(@Nullable PigeonAdditionalUserInfo setterArg) {
        this.additionalUserInfo = setterArg;
        return this;
      }

      private @Nullable PigeonAuthCredential credential;

      public @NonNull Builder setCredential(@Nullable PigeonAuthCredential setterArg) {
        this.credential = setterArg;
        return this;
      }

      public @NonNull PigeonUserCredential build() {
        PigeonUserCredential pigeonReturn = new PigeonUserCredential();
        pigeonReturn.setUser(user);
        pigeonReturn.setAdditionalUserInfo(additionalUserInfo);
        pigeonReturn.setCredential(credential);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add((user == null) ? null : user.toList());
      toListResult.add((additionalUserInfo == null) ? null : additionalUserInfo.toList());
      toListResult.add((credential == null) ? null : credential.toList());
      return toListResult;
    }

    static @NonNull PigeonUserCredential fromList(@NonNull ArrayList<Object> list) {
      PigeonUserCredential pigeonResult = new PigeonUserCredential();
      Object user = list.get(0);
      pigeonResult.setUser(
          (user == null) ? null : PigeonUserDetails.fromList((ArrayList<Object>) user));
      Object additionalUserInfo = list.get(1);
      pigeonResult.setAdditionalUserInfo(
          (additionalUserInfo == null)
              ? null
              : PigeonAdditionalUserInfo.fromList((ArrayList<Object>) additionalUserInfo));
      Object credential = list.get(2);
      pigeonResult.setCredential(
          (credential == null)
              ? null
              : PigeonAuthCredential.fromList((ArrayList<Object>) credential));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonActionCodeSettings {
    private @NonNull String url;

    public @NonNull String getUrl() {
      return url;
    }

    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @Nullable String dynamicLinkDomain;

    public @Nullable String getDynamicLinkDomain() {
      return dynamicLinkDomain;
    }

    public void setDynamicLinkDomain(@Nullable String setterArg) {
      this.dynamicLinkDomain = setterArg;
    }

    private @NonNull Boolean handleCodeInApp;

    public @NonNull Boolean getHandleCodeInApp() {
      return handleCodeInApp;
    }

    public void setHandleCodeInApp(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"handleCodeInApp\" is null.");
      }
      this.handleCodeInApp = setterArg;
    }

    private @Nullable String iOSBundleId;

    public @Nullable String getIOSBundleId() {
      return iOSBundleId;
    }

    public void setIOSBundleId(@Nullable String setterArg) {
      this.iOSBundleId = setterArg;
    }

    private @Nullable String androidPackageName;

    public @Nullable String getAndroidPackageName() {
      return androidPackageName;
    }

    public void setAndroidPackageName(@Nullable String setterArg) {
      this.androidPackageName = setterArg;
    }

    private @NonNull Boolean androidInstallApp;

    public @NonNull Boolean getAndroidInstallApp() {
      return androidInstallApp;
    }

    public void setAndroidInstallApp(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"androidInstallApp\" is null.");
      }
      this.androidInstallApp = setterArg;
    }

    private @Nullable String androidMinimumVersion;

    public @Nullable String getAndroidMinimumVersion() {
      return androidMinimumVersion;
    }

    public void setAndroidMinimumVersion(@Nullable String setterArg) {
      this.androidMinimumVersion = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonActionCodeSettings() {}

    public static final class Builder {

      private @Nullable String url;

      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable String dynamicLinkDomain;

      public @NonNull Builder setDynamicLinkDomain(@Nullable String setterArg) {
        this.dynamicLinkDomain = setterArg;
        return this;
      }

      private @Nullable Boolean handleCodeInApp;

      public @NonNull Builder setHandleCodeInApp(@NonNull Boolean setterArg) {
        this.handleCodeInApp = setterArg;
        return this;
      }

      private @Nullable String iOSBundleId;

      public @NonNull Builder setIOSBundleId(@Nullable String setterArg) {
        this.iOSBundleId = setterArg;
        return this;
      }

      private @Nullable String androidPackageName;

      public @NonNull Builder setAndroidPackageName(@Nullable String setterArg) {
        this.androidPackageName = setterArg;
        return this;
      }

      private @Nullable Boolean androidInstallApp;

      public @NonNull Builder setAndroidInstallApp(@NonNull Boolean setterArg) {
        this.androidInstallApp = setterArg;
        return this;
      }

      private @Nullable String androidMinimumVersion;

      public @NonNull Builder setAndroidMinimumVersion(@Nullable String setterArg) {
        this.androidMinimumVersion = setterArg;
        return this;
      }

      public @NonNull PigeonActionCodeSettings build() {
        PigeonActionCodeSettings pigeonReturn = new PigeonActionCodeSettings();
        pigeonReturn.setUrl(url);
        pigeonReturn.setDynamicLinkDomain(dynamicLinkDomain);
        pigeonReturn.setHandleCodeInApp(handleCodeInApp);
        pigeonReturn.setIOSBundleId(iOSBundleId);
        pigeonReturn.setAndroidPackageName(androidPackageName);
        pigeonReturn.setAndroidInstallApp(androidInstallApp);
        pigeonReturn.setAndroidMinimumVersion(androidMinimumVersion);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(url);
      toListResult.add(dynamicLinkDomain);
      toListResult.add(handleCodeInApp);
      toListResult.add(iOSBundleId);
      toListResult.add(androidPackageName);
      toListResult.add(androidInstallApp);
      toListResult.add(androidMinimumVersion);
      return toListResult;
    }

    static @NonNull PigeonActionCodeSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonActionCodeSettings pigeonResult = new PigeonActionCodeSettings();
      Object url = list.get(0);
      pigeonResult.setUrl((String) url);
      Object dynamicLinkDomain = list.get(1);
      pigeonResult.setDynamicLinkDomain((String) dynamicLinkDomain);
      Object handleCodeInApp = list.get(2);
      pigeonResult.setHandleCodeInApp((Boolean) handleCodeInApp);
      Object iOSBundleId = list.get(3);
      pigeonResult.setIOSBundleId((String) iOSBundleId);
      Object androidPackageName = list.get(4);
      pigeonResult.setAndroidPackageName((String) androidPackageName);
      Object androidInstallApp = list.get(5);
      pigeonResult.setAndroidInstallApp((Boolean) androidInstallApp);
      Object androidMinimumVersion = list.get(6);
      pigeonResult.setAndroidMinimumVersion((String) androidMinimumVersion);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseAuthSettings {
    private @NonNull Boolean appVerificationDisabledForTesting;

    public @NonNull Boolean getAppVerificationDisabledForTesting() {
      return appVerificationDisabledForTesting;
    }

    public void setAppVerificationDisabledForTesting(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException(
            "Nonnull field \"appVerificationDisabledForTesting\" is null.");
      }
      this.appVerificationDisabledForTesting = setterArg;
    }

    private @Nullable String userAccessGroup;

    public @Nullable String getUserAccessGroup() {
      return userAccessGroup;
    }

    public void setUserAccessGroup(@Nullable String setterArg) {
      this.userAccessGroup = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable String smsCode;

    public @Nullable String getSmsCode() {
      return smsCode;
    }

    public void setSmsCode(@Nullable String setterArg) {
      this.smsCode = setterArg;
    }

    private @Nullable Boolean forceRecaptchaFlow;

    public @Nullable Boolean getForceRecaptchaFlow() {
      return forceRecaptchaFlow;
    }

    public void setForceRecaptchaFlow(@Nullable Boolean setterArg) {
      this.forceRecaptchaFlow = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseAuthSettings() {}

    public static final class Builder {

      private @Nullable Boolean appVerificationDisabledForTesting;

      public @NonNull Builder setAppVerificationDisabledForTesting(@NonNull Boolean setterArg) {
        this.appVerificationDisabledForTesting = setterArg;
        return this;
      }

      private @Nullable String userAccessGroup;

      public @NonNull Builder setUserAccessGroup(@Nullable String setterArg) {
        this.userAccessGroup = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable String smsCode;

      public @NonNull Builder setSmsCode(@Nullable String setterArg) {
        this.smsCode = setterArg;
        return this;
      }

      private @Nullable Boolean forceRecaptchaFlow;

      public @NonNull Builder setForceRecaptchaFlow(@Nullable Boolean setterArg) {
        this.forceRecaptchaFlow = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseAuthSettings build() {
        PigeonFirebaseAuthSettings pigeonReturn = new PigeonFirebaseAuthSettings();
        pigeonReturn.setAppVerificationDisabledForTesting(appVerificationDisabledForTesting);
        pigeonReturn.setUserAccessGroup(userAccessGroup);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setSmsCode(smsCode);
        pigeonReturn.setForceRecaptchaFlow(forceRecaptchaFlow);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(appVerificationDisabledForTesting);
      toListResult.add(userAccessGroup);
      toListResult.add(phoneNumber);
      toListResult.add(smsCode);
      toListResult.add(forceRecaptchaFlow);
      return toListResult;
    }

    static @NonNull PigeonFirebaseAuthSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseAuthSettings pigeonResult = new PigeonFirebaseAuthSettings();
      Object appVerificationDisabledForTesting = list.get(0);
      pigeonResult.setAppVerificationDisabledForTesting(
          (Boolean) appVerificationDisabledForTesting);
      Object userAccessGroup = list.get(1);
      pigeonResult.setUserAccessGroup((String) userAccessGroup);
      Object phoneNumber = list.get(2);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object smsCode = list.get(3);
      pigeonResult.setSmsCode((String) smsCode);
      Object forceRecaptchaFlow = list.get(4);
      pigeonResult.setForceRecaptchaFlow((Boolean) forceRecaptchaFlow);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonSignInProvider {
    private @NonNull String providerId;

    public @NonNull String getProviderId() {
      return providerId;
    }

    public void setProviderId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"providerId\" is null.");
      }
      this.providerId = setterArg;
    }

    private @Nullable List<String> scopes;

    public @Nullable List<String> getScopes() {
      return scopes;
    }

    public void setScopes(@Nullable List<String> setterArg) {
      this.scopes = setterArg;
    }

    private @Nullable Map<String, String> customParameters;

    public @Nullable Map<String, String> getCustomParameters() {
      return customParameters;
    }

    public void setCustomParameters(@Nullable Map<String, String> setterArg) {
      this.customParameters = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonSignInProvider() {}

    public static final class Builder {

      private @Nullable String providerId;

      public @NonNull Builder setProviderId(@NonNull String setterArg) {
        this.providerId = setterArg;
        return this;
      }

      private @Nullable List<String> scopes;

      public @NonNull Builder setScopes(@Nullable List<String> setterArg) {
        this.scopes = setterArg;
        return this;
      }

      private @Nullable Map<String, String> customParameters;

      public @NonNull Builder setCustomParameters(@Nullable Map<String, String> setterArg) {
        this.customParameters = setterArg;
        return this;
      }

      public @NonNull PigeonSignInProvider build() {
        PigeonSignInProvider pigeonReturn = new PigeonSignInProvider();
        pigeonReturn.setProviderId(providerId);
        pigeonReturn.setScopes(scopes);
        pigeonReturn.setCustomParameters(customParameters);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(providerId);
      toListResult.add(scopes);
      toListResult.add(customParameters);
      return toListResult;
    }

    static @NonNull PigeonSignInProvider fromList(@NonNull ArrayList<Object> list) {
      PigeonSignInProvider pigeonResult = new PigeonSignInProvider();
      Object providerId = list.get(0);
      pigeonResult.setProviderId((String) providerId);
      Object scopes = list.get(1);
      pigeonResult.setScopes((List<String>) scopes);
      Object customParameters = list.get(2);
      pigeonResult.setCustomParameters((Map<String, String>) customParameters);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonVerifyPhoneNumberRequest {
    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @NonNull Long timeout;

    public @NonNull Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timeout\" is null.");
      }
      this.timeout = setterArg;
    }

    private @Nullable Long forceResendingToken;

    public @Nullable Long getForceResendingToken() {
      return forceResendingToken;
    }

    public void setForceResendingToken(@Nullable Long setterArg) {
      this.forceResendingToken = setterArg;
    }

    private @Nullable String autoRetrievedSmsCodeForTesting;

    public @Nullable String getAutoRetrievedSmsCodeForTesting() {
      return autoRetrievedSmsCodeForTesting;
    }

    public void setAutoRetrievedSmsCodeForTesting(@Nullable String setterArg) {
      this.autoRetrievedSmsCodeForTesting = setterArg;
    }

    private @Nullable String multiFactorInfoId;

    public @Nullable String getMultiFactorInfoId() {
      return multiFactorInfoId;
    }

    public void setMultiFactorInfoId(@Nullable String setterArg) {
      this.multiFactorInfoId = setterArg;
    }

    private @Nullable String multiFactorSessionId;

    public @Nullable String getMultiFactorSessionId() {
      return multiFactorSessionId;
    }

    public void setMultiFactorSessionId(@Nullable String setterArg) {
      this.multiFactorSessionId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonVerifyPhoneNumberRequest() {}

    public static final class Builder {

      private @Nullable String phoneNumber;

      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@NonNull Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable Long forceResendingToken;

      public @NonNull Builder setForceResendingToken(@Nullable Long setterArg) {
        this.forceResendingToken = setterArg;
        return this;
      }

      private @Nullable String autoRetrievedSmsCodeForTesting;

      public @NonNull Builder setAutoRetrievedSmsCodeForTesting(@Nullable String setterArg) {
        this.autoRetrievedSmsCodeForTesting = setterArg;
        return this;
      }

      private @Nullable String multiFactorInfoId;

      public @NonNull Builder setMultiFactorInfoId(@Nullable String setterArg) {
        this.multiFactorInfoId = setterArg;
        return this;
      }

      private @Nullable String multiFactorSessionId;

      public @NonNull Builder setMultiFactorSessionId(@Nullable String setterArg) {
        this.multiFactorSessionId = setterArg;
        return this;
      }

      public @NonNull PigeonVerifyPhoneNumberRequest build() {
        PigeonVerifyPhoneNumberRequest pigeonReturn = new PigeonVerifyPhoneNumberRequest();
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setForceResendingToken(forceResendingToken);
        pigeonReturn.setAutoRetrievedSmsCodeForTesting(autoRetrievedSmsCodeForTesting);
        pigeonReturn.setMultiFactorInfoId(multiFactorInfoId);
        pigeonReturn.setMultiFactorSessionId(multiFactorSessionId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(phoneNumber);
      toListResult.add(timeout);
      toListResult.add(forceResendingToken);
      toListResult.add(autoRetrievedSmsCodeForTesting);
      toListResult.add(multiFactorInfoId);
      toListResult.add(multiFactorSessionId);
      return toListResult;
    }

    static @NonNull PigeonVerifyPhoneNumberRequest fromList(@NonNull ArrayList<Object> list) {
      PigeonVerifyPhoneNumberRequest pigeonResult = new PigeonVerifyPhoneNumberRequest();
      Object phoneNumber = list.get(0);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object timeout = list.get(1);
      pigeonResult.setTimeout(
          (timeout == null)
              ? null
              : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object forceResendingToken = list.get(2);
      pigeonResult.setForceResendingToken(
          (forceResendingToken == null)
              ? null
              : ((forceResendingToken instanceof Integer)
                  ? (Integer) forceResendingToken
                  : (Long) forceResendingToken));
      Object autoRetrievedSmsCodeForTesting = list.get(3);
      pigeonResult.setAutoRetrievedSmsCodeForTesting((String) autoRetrievedSmsCodeForTesting);
      Object multiFactorInfoId = list.get(4);
      pigeonResult.setMultiFactorInfoId((String) multiFactorInfoId);
      Object multiFactorSessionId = list.get(5);
      pigeonResult.setMultiFactorSessionId((String) multiFactorSessionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonIdTokenResult {
    private @Nullable String token;

    public @Nullable String getToken() {
      return token;
    }

    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    private @Nullable Long expirationTimestamp;

    public @Nullable Long getExpirationTimestamp() {
      return expirationTimestamp;
    }

    public void setExpirationTimestamp(@Nullable Long setterArg) {
      this.expirationTimestamp = setterArg;
    }

    private @Nullable Long authTimestamp;

    public @Nullable Long getAuthTimestamp() {
      return authTimestamp;
    }

    public void setAuthTimestamp(@Nullable Long setterArg) {
      this.authTimestamp = setterArg;
    }

    private @Nullable Long issuedAtTimestamp;

    public @Nullable Long getIssuedAtTimestamp() {
      return issuedAtTimestamp;
    }

    public void setIssuedAtTimestamp(@Nullable Long setterArg) {
      this.issuedAtTimestamp = setterArg;
    }

    private @Nullable String signInProvider;

    public @Nullable String getSignInProvider() {
      return signInProvider;
    }

    public void setSignInProvider(@Nullable String setterArg) {
      this.signInProvider = setterArg;
    }

    private @Nullable Map<String, Object> claims;

    public @Nullable Map<String, Object> getClaims() {
      return claims;
    }

    public void setClaims(@Nullable Map<String, Object> setterArg) {
      this.claims = setterArg;
    }

    private @Nullable String signInSecondFactor;

    public @Nullable String getSignInSecondFactor() {
      return signInSecondFactor;
    }

    public void setSignInSecondFactor(@Nullable String setterArg) {
      this.signInSecondFactor = setterArg;
    }

    public static final class Builder {

      private @Nullable String token;

      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }

      private @Nullable Long expirationTimestamp;

      public @NonNull Builder setExpirationTimestamp(@Nullable Long setterArg) {
        this.expirationTimestamp = setterArg;
        return this;
      }

      private @Nullable Long authTimestamp;

      public @NonNull Builder setAuthTimestamp(@Nullable Long setterArg) {
        this.authTimestamp = setterArg;
        return this;
      }

      private @Nullable Long issuedAtTimestamp;

      public @NonNull Builder setIssuedAtTimestamp(@Nullable Long setterArg) {
        this.issuedAtTimestamp = setterArg;
        return this;
      }

      private @Nullable String signInProvider;

      public @NonNull Builder setSignInProvider(@Nullable String setterArg) {
        this.signInProvider = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> claims;

      public @NonNull Builder setClaims(@Nullable Map<String, Object> setterArg) {
        this.claims = setterArg;
        return this;
      }

      private @Nullable String signInSecondFactor;

      public @NonNull Builder setSignInSecondFactor(@Nullable String setterArg) {
        this.signInSecondFactor = setterArg;
        return this;
      }

      public @NonNull PigeonIdTokenResult build() {
        PigeonIdTokenResult pigeonReturn = new PigeonIdTokenResult();
        pigeonReturn.setToken(token);
        pigeonReturn.setExpirationTimestamp(expirationTimestamp);
        pigeonReturn.setAuthTimestamp(authTimestamp);
        pigeonReturn.setIssuedAtTimestamp(issuedAtTimestamp);
        pigeonReturn.setSignInProvider(signInProvider);
        pigeonReturn.setClaims(claims);
        pigeonReturn.setSignInSecondFactor(signInSecondFactor);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(token);
      toListResult.add(expirationTimestamp);
      toListResult.add(authTimestamp);
      toListResult.add(issuedAtTimestamp);
      toListResult.add(signInProvider);
      toListResult.add(claims);
      toListResult.add(signInSecondFactor);
      return toListResult;
    }

    static @NonNull PigeonIdTokenResult fromList(@NonNull ArrayList<Object> list) {
      PigeonIdTokenResult pigeonResult = new PigeonIdTokenResult();
      Object token = list.get(0);
      pigeonResult.setToken((String) token);
      Object expirationTimestamp = list.get(1);
      pigeonResult.setExpirationTimestamp(
          (expirationTimestamp == null)
              ? null
              : ((expirationTimestamp instanceof Integer)
                  ? (Integer) expirationTimestamp
                  : (Long) expirationTimestamp));
      Object authTimestamp = list.get(2);
      pigeonResult.setAuthTimestamp(
          (authTimestamp == null)
              ? null
              : ((authTimestamp instanceof Integer)
                  ? (Integer) authTimestamp
                  : (Long) authTimestamp));
      Object issuedAtTimestamp = list.get(3);
      pigeonResult.setIssuedAtTimestamp(
          (issuedAtTimestamp == null)
              ? null
              : ((issuedAtTimestamp instanceof Integer)
                  ? (Integer) issuedAtTimestamp
                  : (Long) issuedAtTimestamp));
      Object signInProvider = list.get(4);
      pigeonResult.setSignInProvider((String) signInProvider);
      Object claims = list.get(5);
      pigeonResult.setClaims((Map<String, Object>) claims);
      Object signInSecondFactor = list.get(6);
      pigeonResult.setSignInSecondFactor((String) signInSecondFactor);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonUserProfile {
    private @Nullable String displayName;

    public @Nullable String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    private @Nullable String photoUrl;

    public @Nullable String getPhotoUrl() {
      return photoUrl;
    }

    public void setPhotoUrl(@Nullable String setterArg) {
      this.photoUrl = setterArg;
    }

    private @NonNull Boolean displayNameChanged;

    public @NonNull Boolean getDisplayNameChanged() {
      return displayNameChanged;
    }

    public void setDisplayNameChanged(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"displayNameChanged\" is null.");
      }
      this.displayNameChanged = setterArg;
    }

    private @NonNull Boolean photoUrlChanged;

    public @NonNull Boolean getPhotoUrlChanged() {
      return photoUrlChanged;
    }

    public void setPhotoUrlChanged(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"photoUrlChanged\" is null.");
      }
      this.photoUrlChanged = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonUserProfile() {}

    public static final class Builder {

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      private @Nullable String photoUrl;

      public @NonNull Builder setPhotoUrl(@Nullable String setterArg) {
        this.photoUrl = setterArg;
        return this;
      }

      private @Nullable Boolean displayNameChanged;

      public @NonNull Builder setDisplayNameChanged(@NonNull Boolean setterArg) {
        this.displayNameChanged = setterArg;
        return this;
      }

      private @Nullable Boolean photoUrlChanged;

      public @NonNull Builder setPhotoUrlChanged(@NonNull Boolean setterArg) {
        this.photoUrlChanged = setterArg;
        return this;
      }

      public @NonNull PigeonUserProfile build() {
        PigeonUserProfile pigeonReturn = new PigeonUserProfile();
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setPhotoUrl(photoUrl);
        pigeonReturn.setDisplayNameChanged(displayNameChanged);
        pigeonReturn.setPhotoUrlChanged(photoUrlChanged);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(displayName);
      toListResult.add(photoUrl);
      toListResult.add(displayNameChanged);
      toListResult.add(photoUrlChanged);
      return toListResult;
    }

    static @NonNull PigeonUserProfile fromList(@NonNull ArrayList<Object> list) {
      PigeonUserProfile pigeonResult = new PigeonUserProfile();
      Object displayName = list.get(0);
      pigeonResult.setDisplayName((String) displayName);
      Object photoUrl = list.get(1);
      pigeonResult.setPhotoUrl((String) photoUrl);
      Object displayNameChanged = list.get(2);
      pigeonResult.setDisplayNameChanged((Boolean) displayNameChanged);
      Object photoUrlChanged = list.get(3);
      pigeonResult.setPhotoUrlChanged((Boolean) photoUrlChanged);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonTotpSecret {
    private @Nullable Long codeIntervalSeconds;

    public @Nullable Long getCodeIntervalSeconds() {
      return codeIntervalSeconds;
    }

    public void setCodeIntervalSeconds(@Nullable Long setterArg) {
      this.codeIntervalSeconds = setterArg;
    }

    private @Nullable Long codeLength;

    public @Nullable Long getCodeLength() {
      return codeLength;
    }

    public void setCodeLength(@Nullable Long setterArg) {
      this.codeLength = setterArg;
    }

    private @Nullable Long enrollmentCompletionDeadline;

    public @Nullable Long getEnrollmentCompletionDeadline() {
      return enrollmentCompletionDeadline;
    }

    public void setEnrollmentCompletionDeadline(@Nullable Long setterArg) {
      this.enrollmentCompletionDeadline = setterArg;
    }

    private @Nullable String hashingAlgorithm;

    public @Nullable String getHashingAlgorithm() {
      return hashingAlgorithm;
    }

    public void setHashingAlgorithm(@Nullable String setterArg) {
      this.hashingAlgorithm = setterArg;
    }

    private @NonNull String secretKey;

    public @NonNull String getSecretKey() {
      return secretKey;
    }

    public void setSecretKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretKey\" is null.");
      }
      this.secretKey = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonTotpSecret() {}

    public static final class Builder {

      private @Nullable Long codeIntervalSeconds;

      public @NonNull Builder setCodeIntervalSeconds(@Nullable Long setterArg) {
        this.codeIntervalSeconds = setterArg;
        return this;
      }

      private @Nullable Long codeLength;

      public @NonNull Builder setCodeLength(@Nullable Long setterArg) {
        this.codeLength = setterArg;
        return this;
      }

      private @Nullable Long enrollmentCompletionDeadline;

      public @NonNull Builder setEnrollmentCompletionDeadline(@Nullable Long setterArg) {
        this.enrollmentCompletionDeadline = setterArg;
        return this;
      }

      private @Nullable String hashingAlgorithm;

      public @NonNull Builder setHashingAlgorithm(@Nullable String setterArg) {
        this.hashingAlgorithm = setterArg;
        return this;
      }

      private @Nullable String secretKey;

      public @NonNull Builder setSecretKey(@NonNull String setterArg) {
        this.secretKey = setterArg;
        return this;
      }

      public @NonNull PigeonTotpSecret build() {
        PigeonTotpSecret pigeonReturn = new PigeonTotpSecret();
        pigeonReturn.setCodeIntervalSeconds(codeIntervalSeconds);
        pigeonReturn.setCodeLength(codeLength);
        pigeonReturn.setEnrollmentCompletionDeadline(enrollmentCompletionDeadline);
        pigeonReturn.setHashingAlgorithm(hashingAlgorithm);
        pigeonReturn.setSecretKey(secretKey);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(codeIntervalSeconds);
      toListResult.add(codeLength);
      toListResult.add(enrollmentCompletionDeadline);
      toListResult.add(hashingAlgorithm);
      toListResult.add(secretKey);
      return toListResult;
    }

    static @NonNull PigeonTotpSecret fromList(@NonNull ArrayList<Object> list) {
      PigeonTotpSecret pigeonResult = new PigeonTotpSecret();
      Object codeIntervalSeconds = list.get(0);
      pigeonResult.setCodeIntervalSeconds(
          (codeIntervalSeconds == null)
              ? null
              : ((codeIntervalSeconds instanceof Integer)
                  ? (Integer) codeIntervalSeconds
                  : (Long) codeIntervalSeconds));
      Object codeLength = list.get(1);
      pigeonResult.setCodeLength(
          (codeLength == null)
              ? null
              : ((codeLength instanceof Integer) ? (Integer) codeLength : (Long) codeLength));
      Object enrollmentCompletionDeadline = list.get(2);
      pigeonResult.setEnrollmentCompletionDeadline(
          (enrollmentCompletionDeadline == null)
              ? null
              : ((enrollmentCompletionDeadline instanceof Integer)
                  ? (Integer) enrollmentCompletionDeadline
                  : (Long) enrollmentCompletionDeadline));
      Object hashingAlgorithm = list.get(3);
      pigeonResult.setHashingAlgorithm((String) hashingAlgorithm);
      Object secretKey = list.get(4);
      pigeonResult.setSecretKey((String) secretKey);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class FirebaseAuthHostApiCodec extends StandardMessageCodec {
    public static final FirebaseAuthHostApiCodec INSTANCE = new FirebaseAuthHostApiCodec();

    private FirebaseAuthHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthPigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonActionCodeInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonActionCodeInfoData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonActionCodeSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonAdditionalUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonAuthCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PigeonFirebaseAuthSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return PigeonIdTokenResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PigeonMultiFactorSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return PigeonSignInProvider.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return PigeonTotpSecret.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return PigeonUserCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return PigeonUserDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return PigeonUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return PigeonUserProfile.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return PigeonVerifyPhoneNumberRequest.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthPigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((AuthPigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonActionCodeInfo) {
        stream.write(129);
        writeValue(stream, ((PigeonActionCodeInfo) value).toList());
      } else if (value instanceof PigeonActionCodeInfoData) {
        stream.write(130);
        writeValue(stream, ((PigeonActionCodeInfoData) value).toList());
      } else if (value instanceof PigeonActionCodeSettings) {
        stream.write(131);
        writeValue(stream, ((PigeonActionCodeSettings) value).toList());
      } else if (value instanceof PigeonAdditionalUserInfo) {
        stream.write(132);
        writeValue(stream, ((PigeonAdditionalUserInfo) value).toList());
      } else if (value instanceof PigeonAuthCredential) {
        stream.write(133);
        writeValue(stream, ((PigeonAuthCredential) value).toList());
      } else if (value instanceof PigeonFirebaseAuthSettings) {
        stream.write(134);
        writeValue(stream, ((PigeonFirebaseAuthSettings) value).toList());
      } else if (value instanceof PigeonIdTokenResult) {
        stream.write(135);
        writeValue(stream, ((PigeonIdTokenResult) value).toList());
      } else if (value instanceof PigeonMultiFactorInfo) {
        stream.write(136);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else if (value instanceof PigeonMultiFactorSession) {
        stream.write(137);
        writeValue(stream, ((PigeonMultiFactorSession) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(138);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else if (value instanceof PigeonSignInProvider) {
        stream.write(139);
        writeValue(stream, ((PigeonSignInProvider) value).toList());
      } else if (value instanceof PigeonTotpSecret) {
        stream.write(140);
        writeValue(stream, ((PigeonTotpSecret) value).toList());
      } else if (value instanceof PigeonUserCredential) {
        stream.write(141);
        writeValue(stream, ((PigeonUserCredential) value).toList());
      } else if (value instanceof PigeonUserDetails) {
        stream.write(142);
        writeValue(stream, ((PigeonUserDetails) value).toList());
      } else if (value instanceof PigeonUserInfo) {
        stream.write(143);
        writeValue(stream, ((PigeonUserInfo) value).toList());
      } else if (value instanceof PigeonUserProfile) {
        stream.write(144);
        writeValue(stream, ((PigeonUserProfile) value).toList());
      } else if (value instanceof PigeonVerifyPhoneNumberRequest) {
        stream.write(145);
        writeValue(stream, ((PigeonVerifyPhoneNumberRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseAuthHostApi {

    void registerIdTokenListener(
        @NonNull AuthPigeonFirebaseApp app, @NonNull Result<String> result);

    void registerAuthStateListener(
        @NonNull AuthPigeonFirebaseApp app, @NonNull Result<String> result);

    void useEmulator(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String host,
        @NonNull Long port,
        @NonNull Result<Void> result);

    void applyActionCode(
        @NonNull AuthPigeonFirebaseApp app, @NonNull String code, @NonNull Result<Void> result);

    void checkActionCode(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String code,
        @NonNull Result<PigeonActionCodeInfo> result);

    void confirmPasswordReset(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String code,
        @NonNull String newPassword,
        @NonNull Result<Void> result);

    void createUserWithEmailAndPassword(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @NonNull String password,
        @NonNull Result<PigeonUserCredential> result);

    void signInAnonymously(
        @NonNull AuthPigeonFirebaseApp app, @NonNull Result<PigeonUserCredential> result);

    void signInWithCredential(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull Map<String, Object> input,
        @NonNull Result<PigeonUserCredential> result);

    void signInWithCustomToken(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String token,
        @NonNull Result<PigeonUserCredential> result);

    void signInWithEmailAndPassword(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @NonNull String password,
        @NonNull Result<PigeonUserCredential> result);

    void signInWithEmailLink(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @NonNull String emailLink,
        @NonNull Result<PigeonUserCredential> result);

    void signInWithProvider(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonSignInProvider signInProvider,
        @NonNull Result<PigeonUserCredential> result);

    void signOut(@NonNull AuthPigeonFirebaseApp app, @NonNull Result<Void> result);

    void fetchSignInMethodsForEmail(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @NonNull Result<List<String>> result);

    void sendPasswordResetEmail(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @Nullable PigeonActionCodeSettings actionCodeSettings,
        @NonNull Result<Void> result);

    void sendSignInLinkToEmail(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String email,
        @NonNull PigeonActionCodeSettings actionCodeSettings,
        @NonNull Result<Void> result);

    void setLanguageCode(
        @NonNull AuthPigeonFirebaseApp app,
        @Nullable String languageCode,
        @NonNull Result<String> result);

    void setSettings(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonFirebaseAuthSettings settings,
        @NonNull Result<Void> result);

    void verifyPasswordResetCode(
        @NonNull AuthPigeonFirebaseApp app, @NonNull String code, @NonNull Result<String> result);

    void verifyPhoneNumber(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonVerifyPhoneNumberRequest request,
        @NonNull Result<String> result);

    void revokeTokenWithAuthorizationCode(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String authorizationCode,
        @NonNull Result<Void> result);

    /** The codec used by FirebaseAuthHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseAuthHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `FirebaseAuthHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseAuthHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.registerIdTokenListener",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerIdTokenListener(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.registerAuthStateListener",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerAuthStateListener(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.useEmulator",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String hostArg = (String) args.get(1);
                Number portArg = (Number) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.useEmulator(
                    appArg,
                    hostArg,
                    (portArg == null) ? null : portArg.longValue(),
                    resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.applyActionCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.applyActionCode(appArg, codeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.checkActionCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                Result<PigeonActionCodeInfo> resultCallback =
                    new Result<PigeonActionCodeInfo>() {
                      public void success(PigeonActionCodeInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.checkActionCode(appArg, codeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.confirmPasswordReset",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                String newPasswordArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.confirmPasswordReset(appArg, codeArg, newPasswordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.createUserWithEmailAndPassword",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                String passwordArg = (String) args.get(2);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createUserWithEmailAndPassword(appArg, emailArg, passwordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInAnonymously",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInAnonymously(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithCredential",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Map<String, Object> inputArg = (Map<String, Object>) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithCredential(appArg, inputArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithCustomToken",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String tokenArg = (String) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithCustomToken(appArg, tokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithEmailAndPassword",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                String passwordArg = (String) args.get(2);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithEmailAndPassword(appArg, emailArg, passwordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithEmailLink",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                String emailLinkArg = (String) args.get(2);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithEmailLink(appArg, emailArg, emailLinkArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signInWithProvider",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonSignInProvider signInProviderArg = (PigeonSignInProvider) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithProvider(appArg, signInProviderArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.signOut",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signOut(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.fetchSignInMethodsForEmail",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                Result<List<String>> resultCallback =
                    new Result<List<String>>() {
                      public void success(List<String> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.fetchSignInMethodsForEmail(appArg, emailArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.sendPasswordResetEmail",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                PigeonActionCodeSettings actionCodeSettingsArg =
                    (PigeonActionCodeSettings) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendPasswordResetEmail(appArg, emailArg, actionCodeSettingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.sendSignInLinkToEmail",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String emailArg = (String) args.get(1);
                PigeonActionCodeSettings actionCodeSettingsArg =
                    (PigeonActionCodeSettings) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendSignInLinkToEmail(appArg, emailArg, actionCodeSettingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.setLanguageCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String languageCodeArg = (String) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLanguageCode(appArg, languageCodeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.setSettings",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonFirebaseAuthSettings settingsArg = (PigeonFirebaseAuthSettings) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setSettings(appArg, settingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.verifyPasswordResetCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.verifyPasswordResetCode(appArg, codeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.verifyPhoneNumber",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonVerifyPhoneNumberRequest requestArg =
                    (PigeonVerifyPhoneNumberRequest) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.verifyPhoneNumber(appArg, requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthHostApi.revokeTokenWithAuthorizationCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String authorizationCodeArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.revokeTokenWithAuthorizationCode(appArg, authorizationCodeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class FirebaseAuthUserHostApiCodec extends StandardMessageCodec {
    public static final FirebaseAuthUserHostApiCodec INSTANCE = new FirebaseAuthUserHostApiCodec();

    private FirebaseAuthUserHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthPigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonActionCodeInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonActionCodeInfoData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonActionCodeSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonAdditionalUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonAuthCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PigeonFirebaseAuthSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return PigeonIdTokenResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PigeonMultiFactorSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return PigeonSignInProvider.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return PigeonTotpSecret.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return PigeonUserCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return PigeonUserDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return PigeonUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return PigeonUserProfile.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return PigeonVerifyPhoneNumberRequest.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthPigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((AuthPigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonActionCodeInfo) {
        stream.write(129);
        writeValue(stream, ((PigeonActionCodeInfo) value).toList());
      } else if (value instanceof PigeonActionCodeInfoData) {
        stream.write(130);
        writeValue(stream, ((PigeonActionCodeInfoData) value).toList());
      } else if (value instanceof PigeonActionCodeSettings) {
        stream.write(131);
        writeValue(stream, ((PigeonActionCodeSettings) value).toList());
      } else if (value instanceof PigeonAdditionalUserInfo) {
        stream.write(132);
        writeValue(stream, ((PigeonAdditionalUserInfo) value).toList());
      } else if (value instanceof PigeonAuthCredential) {
        stream.write(133);
        writeValue(stream, ((PigeonAuthCredential) value).toList());
      } else if (value instanceof PigeonFirebaseAuthSettings) {
        stream.write(134);
        writeValue(stream, ((PigeonFirebaseAuthSettings) value).toList());
      } else if (value instanceof PigeonIdTokenResult) {
        stream.write(135);
        writeValue(stream, ((PigeonIdTokenResult) value).toList());
      } else if (value instanceof PigeonMultiFactorInfo) {
        stream.write(136);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else if (value instanceof PigeonMultiFactorSession) {
        stream.write(137);
        writeValue(stream, ((PigeonMultiFactorSession) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(138);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else if (value instanceof PigeonSignInProvider) {
        stream.write(139);
        writeValue(stream, ((PigeonSignInProvider) value).toList());
      } else if (value instanceof PigeonTotpSecret) {
        stream.write(140);
        writeValue(stream, ((PigeonTotpSecret) value).toList());
      } else if (value instanceof PigeonUserCredential) {
        stream.write(141);
        writeValue(stream, ((PigeonUserCredential) value).toList());
      } else if (value instanceof PigeonUserDetails) {
        stream.write(142);
        writeValue(stream, ((PigeonUserDetails) value).toList());
      } else if (value instanceof PigeonUserInfo) {
        stream.write(143);
        writeValue(stream, ((PigeonUserInfo) value).toList());
      } else if (value instanceof PigeonUserProfile) {
        stream.write(144);
        writeValue(stream, ((PigeonUserProfile) value).toList());
      } else if (value instanceof PigeonVerifyPhoneNumberRequest) {
        stream.write(145);
        writeValue(stream, ((PigeonVerifyPhoneNumberRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseAuthUserHostApi {

    void delete(@NonNull AuthPigeonFirebaseApp app, @NonNull Result<Void> result);

    void getIdToken(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull Boolean forceRefresh,
        @NonNull Result<PigeonIdTokenResult> result);

    void linkWithCredential(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull Map<String, Object> input,
        @NonNull Result<PigeonUserCredential> result);

    void linkWithProvider(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonSignInProvider signInProvider,
        @NonNull Result<PigeonUserCredential> result);

    void reauthenticateWithCredential(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull Map<String, Object> input,
        @NonNull Result<PigeonUserCredential> result);

    void reauthenticateWithProvider(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonSignInProvider signInProvider,
        @NonNull Result<PigeonUserCredential> result);

    void reload(@NonNull AuthPigeonFirebaseApp app, @NonNull Result<PigeonUserDetails> result);

    void sendEmailVerification(
        @NonNull AuthPigeonFirebaseApp app,
        @Nullable PigeonActionCodeSettings actionCodeSettings,
        @NonNull Result<Void> result);

    void unlink(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String providerId,
        @NonNull Result<PigeonUserCredential> result);

    void updateEmail(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String newEmail,
        @NonNull Result<PigeonUserDetails> result);

    void updatePassword(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String newPassword,
        @NonNull Result<PigeonUserDetails> result);

    void updatePhoneNumber(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull Map<String, Object> input,
        @NonNull Result<PigeonUserDetails> result);

    void updateProfile(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonUserProfile profile,
        @NonNull Result<PigeonUserDetails> result);

    void verifyBeforeUpdateEmail(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String newEmail,
        @Nullable PigeonActionCodeSettings actionCodeSettings,
        @NonNull Result<Void> result);

    /** The codec used by FirebaseAuthUserHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseAuthUserHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `FirebaseAuthUserHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseAuthUserHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.delete",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.delete(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.getIdToken",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Boolean forceRefreshArg = (Boolean) args.get(1);
                Result<PigeonIdTokenResult> resultCallback =
                    new Result<PigeonIdTokenResult>() {
                      public void success(PigeonIdTokenResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getIdToken(appArg, forceRefreshArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.linkWithCredential",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Map<String, Object> inputArg = (Map<String, Object>) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.linkWithCredential(appArg, inputArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.linkWithProvider",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonSignInProvider signInProviderArg = (PigeonSignInProvider) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.linkWithProvider(appArg, signInProviderArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reauthenticateWithCredential",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Map<String, Object> inputArg = (Map<String, Object>) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reauthenticateWithCredential(appArg, inputArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reauthenticateWithProvider",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonSignInProvider signInProviderArg = (PigeonSignInProvider) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reauthenticateWithProvider(appArg, signInProviderArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.reload",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<PigeonUserDetails> resultCallback =
                    new Result<PigeonUserDetails>() {
                      public void success(PigeonUserDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reload(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.sendEmailVerification",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonActionCodeSettings actionCodeSettingsArg =
                    (PigeonActionCodeSettings) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendEmailVerification(appArg, actionCodeSettingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.unlink",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String providerIdArg = (String) args.get(1);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.unlink(appArg, providerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updateEmail",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String newEmailArg = (String) args.get(1);
                Result<PigeonUserDetails> resultCallback =
                    new Result<PigeonUserDetails>() {
                      public void success(PigeonUserDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateEmail(appArg, newEmailArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updatePassword",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String newPasswordArg = (String) args.get(1);
                Result<PigeonUserDetails> resultCallback =
                    new Result<PigeonUserDetails>() {
                      public void success(PigeonUserDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePassword(appArg, newPasswordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updatePhoneNumber",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Map<String, Object> inputArg = (Map<String, Object>) args.get(1);
                Result<PigeonUserDetails> resultCallback =
                    new Result<PigeonUserDetails>() {
                      public void success(PigeonUserDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePhoneNumber(appArg, inputArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.updateProfile",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonUserProfile profileArg = (PigeonUserProfile) args.get(1);
                Result<PigeonUserDetails> resultCallback =
                    new Result<PigeonUserDetails>() {
                      public void success(PigeonUserDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateProfile(appArg, profileArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.FirebaseAuthUserHostApi.verifyBeforeUpdateEmail",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String newEmailArg = (String) args.get(1);
                PigeonActionCodeSettings actionCodeSettingsArg =
                    (PigeonActionCodeSettings) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.verifyBeforeUpdateEmail(
                    appArg, newEmailArg, actionCodeSettingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MultiFactorUserHostApiCodec extends StandardMessageCodec {
    public static final MultiFactorUserHostApiCodec INSTANCE = new MultiFactorUserHostApiCodec();

    private MultiFactorUserHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthPigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonMultiFactorSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthPigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((AuthPigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonMultiFactorInfo) {
        stream.write(129);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else if (value instanceof PigeonMultiFactorSession) {
        stream.write(130);
        writeValue(stream, ((PigeonMultiFactorSession) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(131);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactorUserHostApi {

    void enrollPhone(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull PigeonPhoneMultiFactorAssertion assertion,
        @Nullable String displayName,
        @NonNull Result<Void> result);

    void enrollTotp(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String assertionId,
        @Nullable String displayName,
        @NonNull Result<Void> result);

    void getSession(
        @NonNull AuthPigeonFirebaseApp app, @NonNull Result<PigeonMultiFactorSession> result);

    void unenroll(
        @NonNull AuthPigeonFirebaseApp app,
        @NonNull String factorUid,
        @NonNull Result<Void> result);

    void getEnrolledFactors(
        @NonNull AuthPigeonFirebaseApp app, @NonNull Result<List<PigeonMultiFactorInfo>> result);

    /** The codec used by MultiFactorUserHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MultiFactorUserHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MultiFactorUserHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactorUserHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.enrollPhone",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                PigeonPhoneMultiFactorAssertion assertionArg =
                    (PigeonPhoneMultiFactorAssertion) args.get(1);
                String displayNameArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.enrollPhone(appArg, assertionArg, displayNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.enrollTotp",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String assertionIdArg = (String) args.get(1);
                String displayNameArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.enrollTotp(appArg, assertionIdArg, displayNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.getSession",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<PigeonMultiFactorSession> resultCallback =
                    new Result<PigeonMultiFactorSession>() {
                      public void success(PigeonMultiFactorSession result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getSession(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.unenroll",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                String factorUidArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.unenroll(appArg, factorUidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorUserHostApi.getEnrolledFactors",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AuthPigeonFirebaseApp appArg = (AuthPigeonFirebaseApp) args.get(0);
                Result<List<PigeonMultiFactorInfo>> resultCallback =
                    new Result<List<PigeonMultiFactorInfo>>() {
                      public void success(List<PigeonMultiFactorInfo> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getEnrolledFactors(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MultiFactoResolverHostApiCodec extends StandardMessageCodec {
    public static final MultiFactoResolverHostApiCodec INSTANCE =
        new MultiFactoResolverHostApiCodec();

    private MultiFactoResolverHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonAdditionalUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonAuthCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonUserCredential.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonUserDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonUserInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonAdditionalUserInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonAdditionalUserInfo) value).toList());
      } else if (value instanceof PigeonAuthCredential) {
        stream.write(129);
        writeValue(stream, ((PigeonAuthCredential) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(130);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else if (value instanceof PigeonUserCredential) {
        stream.write(131);
        writeValue(stream, ((PigeonUserCredential) value).toList());
      } else if (value instanceof PigeonUserDetails) {
        stream.write(132);
        writeValue(stream, ((PigeonUserDetails) value).toList());
      } else if (value instanceof PigeonUserInfo) {
        stream.write(133);
        writeValue(stream, ((PigeonUserInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactoResolverHostApi {

    void resolveSignIn(
        @NonNull String resolverId,
        @Nullable PigeonPhoneMultiFactorAssertion assertion,
        @Nullable String totpAssertionId,
        @NonNull Result<PigeonUserCredential> result);

    /** The codec used by MultiFactoResolverHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MultiFactoResolverHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MultiFactoResolverHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactoResolverHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactoResolverHostApi.resolveSignIn",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String resolverIdArg = (String) args.get(0);
                PigeonPhoneMultiFactorAssertion assertionArg =
                    (PigeonPhoneMultiFactorAssertion) args.get(1);
                String totpAssertionIdArg = (String) args.get(2);
                Result<PigeonUserCredential> resultCallback =
                    new Result<PigeonUserCredential>() {
                      public void success(PigeonUserCredential result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.resolveSignIn(resolverIdArg, assertionArg, totpAssertionIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MultiFactorTotpHostApiCodec extends StandardMessageCodec {
    public static final MultiFactorTotpHostApiCodec INSTANCE = new MultiFactorTotpHostApiCodec();

    private MultiFactorTotpHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonTotpSecret.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonTotpSecret) {
        stream.write(128);
        writeValue(stream, ((PigeonTotpSecret) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactorTotpHostApi {

    void generateSecret(@NonNull String sessionId, @NonNull Result<PigeonTotpSecret> result);

    void getAssertionForEnrollment(
        @NonNull String secretKey, @NonNull String oneTimePassword, @NonNull Result<String> result);

    void getAssertionForSignIn(
        @NonNull String enrollmentId,
        @NonNull String oneTimePassword,
        @NonNull Result<String> result);

    /** The codec used by MultiFactorTotpHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MultiFactorTotpHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MultiFactorTotpHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactorTotpHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.generateSecret",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String sessionIdArg = (String) args.get(0);
                Result<PigeonTotpSecret> resultCallback =
                    new Result<PigeonTotpSecret>() {
                      public void success(PigeonTotpSecret result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.generateSecret(sessionIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.getAssertionForEnrollment",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String secretKeyArg = (String) args.get(0);
                String oneTimePasswordArg = (String) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAssertionForEnrollment(secretKeyArg, oneTimePasswordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpHostApi.getAssertionForSignIn",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String enrollmentIdArg = (String) args.get(0);
                String oneTimePasswordArg = (String) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAssertionForSignIn(enrollmentIdArg, oneTimePasswordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactorTotpSecretHostApi {

    void generateQrCodeUrl(
        @NonNull String secretKey,
        @Nullable String accountName,
        @Nullable String issuer,
        @NonNull Result<String> result);

    void openInOtpApp(
        @NonNull String secretKey, @NonNull String qrCodeUrl, @NonNull Result<Void> result);

    /** The codec used by MultiFactorTotpSecretHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**
     * Sets up an instance of `MultiFactorTotpSecretHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactorTotpSecretHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpSecretHostApi.generateQrCodeUrl",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String secretKeyArg = (String) args.get(0);
                String accountNameArg = (String) args.get(1);
                String issuerArg = (String) args.get(2);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.generateQrCodeUrl(secretKeyArg, accountNameArg, issuerArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.MultiFactorTotpSecretHostApi.openInOtpApp",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String secretKeyArg = (String) args.get(0);
                String qrCodeUrlArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.openInOtpApp(secretKeyArg, qrCodeUrlArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class GenerateInterfacesCodec extends StandardMessageCodec {
    public static final GenerateInterfacesCodec INSTANCE = new GenerateInterfacesCodec();

    private GenerateInterfacesCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonMultiFactorInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Only used to generate the object interface that are use outside of the Pigeon interface
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface GenerateInterfaces {

    void pigeonInterface(@NonNull PigeonMultiFactorInfo info);

    /** The codec used by GenerateInterfaces. */
    static @NonNull MessageCodec<Object> getCodec() {
      return GenerateInterfacesCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `GenerateInterfaces` to handle messages through the `binaryMessenger`.
     */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable GenerateInterfaces api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.firebase_auth_platform_interface.GenerateInterfaces.pigeonInterface",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonMultiFactorInfo infoArg = (PigeonMultiFactorInfo) args.get(0);
                try {
                  api.pigeonInterface(infoArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
